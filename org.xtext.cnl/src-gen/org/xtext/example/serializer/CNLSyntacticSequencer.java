/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.services.CNLGrammarAccess;

@SuppressWarnings("all")
public class CNLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CNLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DelFin_ImmediatelyKeyword_1_0_1_1_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CNLGrammarAccess) access;
		match_DelFin_ImmediatelyKeyword_1_0_1_1_0_q = new TokenAlias(false, true, grammarAccess.getDelFinAccess().getImmediatelyKeyword_1_0_1_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTIME_PREF_LITERALRule())
			return getTIME_PREF_LITERALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getXOR_OPERATORRule())
			return getXOR_OPERATORToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * COMMA  returns ecore::EString: 
	 * 	',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * TIME_PREF_LITERAL returns ecore::EString:
	 * 	'#T';
	 */
	protected String getTIME_PREF_LITERALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#T";
	}
	
	/**
	 * XOR_OPERATOR:
	 * 	'XOR';
	 */
	protected String getXOR_OPERATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "XOR";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DelFin_ImmediatelyKeyword_1_0_1_1_0_q.equals(syntax))
				emit_DelFin_ImmediatelyKeyword_1_0_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'immediately'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'which' 'must' 'occur' (ambiguity) 'after' fin=[SentenceDeclaration|Sentence]
	 
	 * </pre>
	 */
	protected void emit_DelFin_ImmediatelyKeyword_1_0_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
