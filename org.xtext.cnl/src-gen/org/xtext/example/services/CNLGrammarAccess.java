/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CNLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclVarInputAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclVarInputDeclVarInputParserRuleCall_0_0 = (RuleCall)cDeclVarInputAssignment_0.eContents().get(0);
		private final Assignment cDeclVarOutputAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclVarOutputDeclVarOutputParserRuleCall_1_0 = (RuleCall)cDeclVarOutputAssignment_1.eContents().get(0);
		private final Assignment cSentDeclarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSentDeclarationSentDeclarationParserRuleCall_2_0 = (RuleCall)cSentDeclarationAssignment_2.eContents().get(0);
		private final Assignment cReqDeclarationAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cReqDeclarationReqDeclarationParserRuleCall_3_0 = (RuleCall)cReqDeclarationAssignment_3.eContents().get(0);
		
		//// Model:
		////    (requirements+=Requirement '.')*;
		//Model:
		//(
		//    declVarInput+=DeclVarInput |
		//    declVarOutput+=DeclVarOutput |
		//    sentDeclaration+=SentDeclaration |
		//    reqDeclaration+=ReqDeclaration
		//)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    declVarInput+=DeclVarInput |
		//    declVarOutput+=DeclVarOutput |
		//    sentDeclaration+=SentDeclaration |
		//    reqDeclaration+=ReqDeclaration
		//)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declVarInput+=DeclVarInput
		public Assignment getDeclVarInputAssignment_0() { return cDeclVarInputAssignment_0; }
		
		//DeclVarInput
		public RuleCall getDeclVarInputDeclVarInputParserRuleCall_0_0() { return cDeclVarInputDeclVarInputParserRuleCall_0_0; }
		
		//declVarOutput+=DeclVarOutput
		public Assignment getDeclVarOutputAssignment_1() { return cDeclVarOutputAssignment_1; }
		
		//DeclVarOutput
		public RuleCall getDeclVarOutputDeclVarOutputParserRuleCall_1_0() { return cDeclVarOutputDeclVarOutputParserRuleCall_1_0; }
		
		//sentDeclaration+=SentDeclaration
		public Assignment getSentDeclarationAssignment_2() { return cSentDeclarationAssignment_2; }
		
		//SentDeclaration
		public RuleCall getSentDeclarationSentDeclarationParserRuleCall_2_0() { return cSentDeclarationSentDeclarationParserRuleCall_2_0; }
		
		//reqDeclaration+=ReqDeclaration
		public Assignment getReqDeclarationAssignment_3() { return cReqDeclarationAssignment_3; }
		
		//ReqDeclaration
		public RuleCall getReqDeclarationReqDeclarationParserRuleCall_3_0() { return cReqDeclarationReqDeclarationParserRuleCall_3_0; }
	}
	public class ReqDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.ReqDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREQUIREMENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementRequirementParserRuleCall_2_0 = (RuleCall)cRequirementAssignment_2.eContents().get(0);
		private final Keyword cEND_REQUIREMENTKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// грамматика для требований
		//ReqDeclaration:
		//    'REQUIREMENT'
		//    name=ID
		//    requirement=Requirement
		//    'END_REQUIREMENT'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'REQUIREMENT'
		//name=ID
		//requirement=Requirement
		//'END_REQUIREMENT'
		public Group getGroup() { return cGroup; }
		
		//'REQUIREMENT'
		public Keyword getREQUIREMENTKeyword_0() { return cREQUIREMENTKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirement=Requirement
		public Assignment getRequirementAssignment_2() { return cRequirementAssignment_2; }
		
		//Requirement
		public RuleCall getRequirementRequirementParserRuleCall_2_0() { return cRequirementRequirementParserRuleCall_2_0; }
		
		//'END_REQUIREMENT'
		public Keyword getEND_REQUIREMENTKeyword_3() { return cEND_REQUIREMENTKeyword_3; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTriggerTrigParserRuleCall_0_0_0 = (RuleCall)cTriggerAssignment_0_0.eContents().get(0);
		private final Assignment cInvariantAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cInvariantInv_alwaysParserRuleCall_0_1_0 = (RuleCall)cInvariantAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Requirement:
		//    (trigger=Trig
		//    | invariant=Inv_always) '.';
		@Override public ParserRule getRule() { return rule; }
		
		//(trigger=Trig
		//| invariant=Inv_always) '.'
		public Group getGroup() { return cGroup; }
		
		//(trigger=Trig
		//| invariant=Inv_always)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//trigger=Trig
		public Assignment getTriggerAssignment_0_0() { return cTriggerAssignment_0_0; }
		
		//Trig
		public RuleCall getTriggerTrigParserRuleCall_0_0_0() { return cTriggerTrigParserRuleCall_0_0_0; }
		
		//invariant=Inv_always
		public Assignment getInvariantAssignment_0_1() { return cInvariantAssignment_0_1; }
		
		//Inv_always
		public RuleCall getInvariantInv_alwaysParserRuleCall_0_1_0() { return cInvariantInv_alwaysParserRuleCall_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class TrigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Trig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cTrigAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cAfterKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cTrigAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cTrigSentenceParserRuleCall_0_0_1_1_0 = (RuleCall)cTrigAssignment_0_0_1_1.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_0_0_1_2 = (RuleCall)cGroup_0_0_1.eContents().get(2);
		private final Keyword cAlwaysKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInvariantAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cInvariantInvParserRuleCall_1_0_0 = (RuleCall)cInvariantAssignment_1_0.eContents().get(0);
		private final Assignment cRelease_reactionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRelease_reactionRelReaParserRuleCall_1_1_0 = (RuleCall)cRelease_reactionAssignment_1_1.eContents().get(0);
		private final Assignment cDelay_finalAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cDelay_finalDelFinParserRuleCall_1_2_0 = (RuleCall)cDelay_finalAssignment_1_2.eContents().get(0);
		
		//Trig:
		//    (
		//        {Trig} ('After' trig=Sentence Comma)
		//        | 'Always'
		//    )
		//    (invariant=Inv | release_reaction=RelRea | delay_final=DelFin)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    {Trig} ('After' trig=Sentence Comma)
		//    | 'Always'
		//)
		//(invariant=Inv | release_reaction=RelRea | delay_final=DelFin)
		public Group getGroup() { return cGroup; }
		
		//(
		//    {Trig} ('After' trig=Sentence Comma)
		//    | 'Always'
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{Trig} ('After' trig=Sentence Comma)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{Trig}
		public Action getTrigAction_0_0_0() { return cTrigAction_0_0_0; }
		
		//('After' trig=Sentence Comma)
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//'After'
		public Keyword getAfterKeyword_0_0_1_0() { return cAfterKeyword_0_0_1_0; }
		
		//trig=Sentence
		public Assignment getTrigAssignment_0_0_1_1() { return cTrigAssignment_0_0_1_1; }
		
		//Sentence
		public RuleCall getTrigSentenceParserRuleCall_0_0_1_1_0() { return cTrigSentenceParserRuleCall_0_0_1_1_0; }
		
		//Comma
		public RuleCall getCommaParserRuleCall_0_0_1_2() { return cCommaParserRuleCall_0_0_1_2; }
		
		//'Always'
		public Keyword getAlwaysKeyword_0_1() { return cAlwaysKeyword_0_1; }
		
		//(invariant=Inv | release_reaction=RelRea | delay_final=DelFin)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//invariant=Inv
		public Assignment getInvariantAssignment_1_0() { return cInvariantAssignment_1_0; }
		
		//Inv
		public RuleCall getInvariantInvParserRuleCall_1_0_0() { return cInvariantInvParserRuleCall_1_0_0; }
		
		//release_reaction=RelRea
		public Assignment getRelease_reactionAssignment_1_1() { return cRelease_reactionAssignment_1_1; }
		
		//RelRea
		public RuleCall getRelease_reactionRelReaParserRuleCall_1_1_0() { return cRelease_reactionRelReaParserRuleCall_1_1_0; }
		
		//delay_final=DelFin
		public Assignment getDelay_finalAssignment_1_2() { return cDelay_finalAssignment_1_2; }
		
		//DelFin
		public RuleCall getDelay_finalDelFinParserRuleCall_1_2_0() { return cDelay_finalDelFinParserRuleCall_1_2_0; }
	}
	public class InvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Inv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvSentenceParserRuleCall_1_0 = (RuleCall)cInvAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cCommaParserRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cDelay_finalAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDelay_finalDelFinParserRuleCall_2_0_1_0 = (RuleCall)cDelay_finalAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cShouldKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cRemainKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cValidKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cUntilKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cRelease_reactionAssignment_2_1_4 = (Assignment)cGroup_2_1.eContents().get(4);
		private final RuleCall cRelease_reactionRelReaParserRuleCall_2_1_4_0 = (RuleCall)cRelease_reactionAssignment_2_1_4.eContents().get(0);
		
		//Inv:
		//    (
		//        {Inv} inv=Sentence
		//        ((Comma delay_final=DelFin) |
		//            ('should' 'remain' 'valid' 'until' release_reaction=RelRea))?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    {Inv} inv=Sentence
		//    ((Comma delay_final=DelFin) |
		//        ('should' 'remain' 'valid' 'until' release_reaction=RelRea))?
		//)
		public Group getGroup() { return cGroup; }
		
		//{Inv}
		public Action getInvAction_0() { return cInvAction_0; }
		
		//inv=Sentence
		public Assignment getInvAssignment_1() { return cInvAssignment_1; }
		
		//Sentence
		public RuleCall getInvSentenceParserRuleCall_1_0() { return cInvSentenceParserRuleCall_1_0; }
		
		//((Comma delay_final=DelFin) |
		//    ('should' 'remain' 'valid' 'until' release_reaction=RelRea))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(Comma delay_final=DelFin)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//Comma
		public RuleCall getCommaParserRuleCall_2_0_0() { return cCommaParserRuleCall_2_0_0; }
		
		//delay_final=DelFin
		public Assignment getDelay_finalAssignment_2_0_1() { return cDelay_finalAssignment_2_0_1; }
		
		//DelFin
		public RuleCall getDelay_finalDelFinParserRuleCall_2_0_1_0() { return cDelay_finalDelFinParserRuleCall_2_0_1_0; }
		
		//('should' 'remain' 'valid' 'until' release_reaction=RelRea)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'should'
		public Keyword getShouldKeyword_2_1_0() { return cShouldKeyword_2_1_0; }
		
		//'remain'
		public Keyword getRemainKeyword_2_1_1() { return cRemainKeyword_2_1_1; }
		
		//'valid'
		public Keyword getValidKeyword_2_1_2() { return cValidKeyword_2_1_2; }
		
		//'until'
		public Keyword getUntilKeyword_2_1_3() { return cUntilKeyword_2_1_3; }
		
		//release_reaction=RelRea
		public Assignment getRelease_reactionAssignment_2_1_4() { return cRelease_reactionAssignment_2_1_4; }
		
		//RelRea
		public RuleCall getRelease_reactionRelReaParserRuleCall_2_1_4_0() { return cRelease_reactionRelReaParserRuleCall_2_1_4_0; }
	}
	public class Inv_alwaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Inv_always");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInv_alwaysAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInvAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInvSentenceParserRuleCall_1_0_0 = (RuleCall)cInvAssignment_1_0.eContents().get(0);
		private final Keyword cShouldKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAlwaysKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRemainKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cValidKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cUntilKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cRelease_reactionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cRelease_reactionRelReaParserRuleCall_1_6_0 = (RuleCall)cRelease_reactionAssignment_1_6.eContents().get(0);
		
		//Inv_always:
		//    {Inv_always}
		//    (
		//        inv=Sentence 'should' 'always' 'remain' 'valid' 'until' release_reaction=RelRea
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inv_always}
		//(
		//    inv=Sentence 'should' 'always' 'remain' 'valid' 'until' release_reaction=RelRea
		//)
		public Group getGroup() { return cGroup; }
		
		//{Inv_always}
		public Action getInv_alwaysAction_0() { return cInv_alwaysAction_0; }
		
		//(
		//    inv=Sentence 'should' 'always' 'remain' 'valid' 'until' release_reaction=RelRea
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//inv=Sentence
		public Assignment getInvAssignment_1_0() { return cInvAssignment_1_0; }
		
		//Sentence
		public RuleCall getInvSentenceParserRuleCall_1_0_0() { return cInvSentenceParserRuleCall_1_0_0; }
		
		//'should'
		public Keyword getShouldKeyword_1_1() { return cShouldKeyword_1_1; }
		
		//'always'
		public Keyword getAlwaysKeyword_1_2() { return cAlwaysKeyword_1_2; }
		
		//'remain'
		public Keyword getRemainKeyword_1_3() { return cRemainKeyword_1_3; }
		
		//'valid'
		public Keyword getValidKeyword_1_4() { return cValidKeyword_1_4; }
		
		//'until'
		public Keyword getUntilKeyword_1_5() { return cUntilKeyword_1_5; }
		
		//release_reaction=RelRea
		public Assignment getRelease_reactionAssignment_1_6() { return cRelease_reactionAssignment_1_6; }
		
		//RelRea
		public RuleCall getRelease_reactionRelReaParserRuleCall_1_6_0() { return cRelease_reactionRelReaParserRuleCall_1_6_0; }
	}
	public class RelReaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.RelRea");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEitherKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cRelAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cRelAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRelSentenceParserRuleCall_0_2_0 = (RuleCall)cRelAssignment_0_2.eContents().get(0);
		private final Keyword cOrKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cReactionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cReactionReactionParserRuleCall_0_4_0 = (RuleCall)cReactionAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final RuleCall cCommaParserRuleCall_0_5_0 = (RuleCall)cGroup_0_5.eContents().get(0);
		private final Assignment cDelay_finalAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cDelay_finalDelFinParserRuleCall_0_5_1_0 = (RuleCall)cDelay_finalAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRelAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelSentenceParserRuleCall_1_1_0 = (RuleCall)cRelAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cReaAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cReactionAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cReactionReactionParserRuleCall_2_1_0_0 = (RuleCall)cReactionAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cDelay_finalAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cDelay_finalDelFinParserRuleCall_2_1_1_1_0 = (RuleCall)cDelay_finalAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReaAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cReactionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cIsKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cAlwaysKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cReaAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cReaSentenceParserRuleCall_3_1_3_0 = (RuleCall)cReaAssignment_3_1_3.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cGroup_3_1.eContents().get(4);
		private final RuleCall cCommaParserRuleCall_3_1_4_0 = (RuleCall)cGroup_3_1_4.eContents().get(0);
		private final Assignment cDelay_finalAssignment_3_1_4_1 = (Assignment)cGroup_3_1_4.eContents().get(1);
		private final RuleCall cDelay_finalDelFinParserRuleCall_3_1_4_1_0 = (RuleCall)cDelay_finalAssignment_3_1_4_1.eContents().get(0);
		
		//RelRea:
		//    (
		//        'either' {Rel} rel=Sentence 'or' reaction=Reaction (Comma delay_final=DelFin)?
		//    ) |
		//    {Rel}
		//    (
		//        rel=Sentence
		//    ) |
		//    {Rea}
		//    (
		//        reaction=Reaction (Comma delay_final=DelFin)?
		//    ) |
		//    {Rea}
		//    (
		//        'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    'either' {Rel} rel=Sentence 'or' reaction=Reaction (Comma delay_final=DelFin)?
		//) |
		//{Rel}
		//(
		//    rel=Sentence
		//) |
		//{Rea}
		//(
		//    reaction=Reaction (Comma delay_final=DelFin)?
		//) |
		//{Rea}
		//(
		//    'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(
		//    'either' {Rel} rel=Sentence 'or' reaction=Reaction (Comma delay_final=DelFin)?
		//)
		public Group getGroup_0() { return cGroup_0; }
		
		//'either'
		public Keyword getEitherKeyword_0_0() { return cEitherKeyword_0_0; }
		
		//{Rel}
		public Action getRelAction_0_1() { return cRelAction_0_1; }
		
		//rel=Sentence
		public Assignment getRelAssignment_0_2() { return cRelAssignment_0_2; }
		
		//Sentence
		public RuleCall getRelSentenceParserRuleCall_0_2_0() { return cRelSentenceParserRuleCall_0_2_0; }
		
		//'or'
		public Keyword getOrKeyword_0_3() { return cOrKeyword_0_3; }
		
		//reaction=Reaction
		public Assignment getReactionAssignment_0_4() { return cReactionAssignment_0_4; }
		
		//Reaction
		public RuleCall getReactionReactionParserRuleCall_0_4_0() { return cReactionReactionParserRuleCall_0_4_0; }
		
		//(Comma delay_final=DelFin)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//Comma
		public RuleCall getCommaParserRuleCall_0_5_0() { return cCommaParserRuleCall_0_5_0; }
		
		//delay_final=DelFin
		public Assignment getDelay_finalAssignment_0_5_1() { return cDelay_finalAssignment_0_5_1; }
		
		//DelFin
		public RuleCall getDelay_finalDelFinParserRuleCall_0_5_1_0() { return cDelay_finalDelFinParserRuleCall_0_5_1_0; }
		
		//{Rel}
		//(
		//    rel=Sentence
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Rel}
		public Action getRelAction_1_0() { return cRelAction_1_0; }
		
		//(
		//    rel=Sentence
		//)
		public Assignment getRelAssignment_1_1() { return cRelAssignment_1_1; }
		
		//Sentence
		public RuleCall getRelSentenceParserRuleCall_1_1_0() { return cRelSentenceParserRuleCall_1_1_0; }
		
		//{Rea}
		//(
		//    reaction=Reaction (Comma delay_final=DelFin)?
		//)
		public Group getGroup_2() { return cGroup_2; }
		
		//{Rea}
		public Action getReaAction_2_0() { return cReaAction_2_0; }
		
		//(
		//    reaction=Reaction (Comma delay_final=DelFin)?
		//)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//reaction=Reaction
		public Assignment getReactionAssignment_2_1_0() { return cReactionAssignment_2_1_0; }
		
		//Reaction
		public RuleCall getReactionReactionParserRuleCall_2_1_0_0() { return cReactionReactionParserRuleCall_2_1_0_0; }
		
		//(Comma delay_final=DelFin)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//Comma
		public RuleCall getCommaParserRuleCall_2_1_1_0() { return cCommaParserRuleCall_2_1_1_0; }
		
		//delay_final=DelFin
		public Assignment getDelay_finalAssignment_2_1_1_1() { return cDelay_finalAssignment_2_1_1_1; }
		
		//DelFin
		public RuleCall getDelay_finalDelFinParserRuleCall_2_1_1_1_0() { return cDelay_finalDelFinParserRuleCall_2_1_1_1_0; }
		
		//{Rea}
		//(
		//    'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
		//)
		public Group getGroup_3() { return cGroup_3; }
		
		//{Rea}
		public Action getReaAction_3_0() { return cReaAction_3_0; }
		
		//(
		//    'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
		//)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Reaction'
		public Keyword getReactionKeyword_3_1_0() { return cReactionKeyword_3_1_0; }
		
		//'is'
		public Keyword getIsKeyword_3_1_1() { return cIsKeyword_3_1_1; }
		
		//'always'
		public Keyword getAlwaysKeyword_3_1_2() { return cAlwaysKeyword_3_1_2; }
		
		//rea=Sentence
		public Assignment getReaAssignment_3_1_3() { return cReaAssignment_3_1_3; }
		
		//Sentence
		public RuleCall getReaSentenceParserRuleCall_3_1_3_0() { return cReaSentenceParserRuleCall_3_1_3_0; }
		
		//(Comma delay_final=DelFin)?
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//Comma
		public RuleCall getCommaParserRuleCall_3_1_4_0() { return cCommaParserRuleCall_3_1_4_0; }
		
		//delay_final=DelFin
		public Assignment getDelay_finalAssignment_3_1_4_1() { return cDelay_finalAssignment_3_1_4_1; }
		
		//DelFin
		public RuleCall getDelay_finalDelFinParserRuleCall_3_1_4_1_0() { return cDelay_finalDelFinParserRuleCall_3_1_4_1_0; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReaSentenceParserRuleCall_3_0 = (RuleCall)cReaAssignment_3.eContents().get(0);
		
		//Reaction:
		//    {Rea} 'reaction' 'is' rea=Sentence
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rea} 'reaction' 'is' rea=Sentence
		public Group getGroup() { return cGroup; }
		
		//{Rea}
		public Action getReaAction_0() { return cReaAction_0; }
		
		//'reaction'
		public Keyword getReactionKeyword_1() { return cReactionKeyword_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//rea=Sentence
		public Assignment getReaAssignment_3() { return cReaAssignment_3; }
		
		//Sentence
		public RuleCall getReaSentenceParserRuleCall_3_0() { return cReaSentenceParserRuleCall_3_0; }
	}
	public class DelFinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DelFin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cWhichKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Keyword cMustKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOccurKeyword_1_0_0_2 = (Keyword)cGroup_1_0_0.eContents().get(2);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_0 = (Group)cAlternatives_1_0_1.eContents().get(0);
		private final Assignment cDelayAssignment_1_0_1_0_0 = (Assignment)cGroup_1_0_1_0.eContents().get(0);
		private final RuleCall cDelayDelayParserRuleCall_1_0_1_0_0_0 = (RuleCall)cDelayAssignment_1_0_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1_0_1 = (Group)cGroup_1_0_1_0.eContents().get(1);
		private final Keyword cFromKeyword_1_0_1_0_1_0 = (Keyword)cGroup_1_0_1_0_1.eContents().get(0);
		private final Assignment cFinAssignment_1_0_1_0_1_1 = (Assignment)cGroup_1_0_1_0_1.eContents().get(1);
		private final RuleCall cFinSentenceParserRuleCall_1_0_1_0_1_1_0 = (RuleCall)cFinAssignment_1_0_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cImmediatelyKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Keyword cAfterKeyword_1_0_1_1_1 = (Keyword)cGroup_1_0_1_1.eContents().get(1);
		private final Assignment cFinAssignment_1_0_1_1_2 = (Assignment)cGroup_1_0_1_1.eContents().get(2);
		private final RuleCall cFinSentenceParserRuleCall_1_0_1_1_2_0 = (RuleCall)cFinAssignment_1_0_1_1_2.eContents().get(0);
		private final Assignment cFinAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFinSentenceParserRuleCall_1_1_0 = (RuleCall)cFinAssignment_1_1.eContents().get(0);
		
		//DelFin:
		//    {Sentence}
		//    (
		//        (
		//            ('which' 'must' 'occur' )
		//                (
		//                    (delay=Delay ('from' fin=Sentence)?)
		//                    | (('immediately')? 'after' fin=Sentence)
		//                )
		//        )
		//        | fin=Sentence
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sentence}
		//(
		//    (
		//        ('which' 'must' 'occur' )
		//            (
		//                (delay=Delay ('from' fin=Sentence)?)
		//                | (('immediately')? 'after' fin=Sentence)
		//            )
		//    )
		//    | fin=Sentence
		//)
		public Group getGroup() { return cGroup; }
		
		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }
		
		//(
		//    (
		//        ('which' 'must' 'occur' )
		//            (
		//                (delay=Delay ('from' fin=Sentence)?)
		//                | (('immediately')? 'after' fin=Sentence)
		//            )
		//    )
		//    | fin=Sentence
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(
		//    ('which' 'must' 'occur' )
		//        (
		//            (delay=Delay ('from' fin=Sentence)?)
		//            | (('immediately')? 'after' fin=Sentence)
		//        )
		//)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('which' 'must' 'occur' )
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'which'
		public Keyword getWhichKeyword_1_0_0_0() { return cWhichKeyword_1_0_0_0; }
		
		//'must'
		public Keyword getMustKeyword_1_0_0_1() { return cMustKeyword_1_0_0_1; }
		
		//'occur'
		public Keyword getOccurKeyword_1_0_0_2() { return cOccurKeyword_1_0_0_2; }
		
		//(
		//    (delay=Delay ('from' fin=Sentence)?)
		//    | (('immediately')? 'after' fin=Sentence)
		//)
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//(delay=Delay ('from' fin=Sentence)?)
		public Group getGroup_1_0_1_0() { return cGroup_1_0_1_0; }
		
		//delay=Delay
		public Assignment getDelayAssignment_1_0_1_0_0() { return cDelayAssignment_1_0_1_0_0; }
		
		//Delay
		public RuleCall getDelayDelayParserRuleCall_1_0_1_0_0_0() { return cDelayDelayParserRuleCall_1_0_1_0_0_0; }
		
		//('from' fin=Sentence)?
		public Group getGroup_1_0_1_0_1() { return cGroup_1_0_1_0_1; }
		
		//'from'
		public Keyword getFromKeyword_1_0_1_0_1_0() { return cFromKeyword_1_0_1_0_1_0; }
		
		//fin=Sentence
		public Assignment getFinAssignment_1_0_1_0_1_1() { return cFinAssignment_1_0_1_0_1_1; }
		
		//Sentence
		public RuleCall getFinSentenceParserRuleCall_1_0_1_0_1_1_0() { return cFinSentenceParserRuleCall_1_0_1_0_1_1_0; }
		
		//(('immediately')? 'after' fin=Sentence)
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//('immediately')?
		public Keyword getImmediatelyKeyword_1_0_1_1_0() { return cImmediatelyKeyword_1_0_1_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_1_0_1_1_1() { return cAfterKeyword_1_0_1_1_1; }
		
		//fin=Sentence
		public Assignment getFinAssignment_1_0_1_1_2() { return cFinAssignment_1_0_1_1_2; }
		
		//Sentence
		public RuleCall getFinSentenceParserRuleCall_1_0_1_1_2_0() { return cFinSentenceParserRuleCall_1_0_1_1_2_0; }
		
		//fin=Sentence
		public Assignment getFinAssignment_1_1() { return cFinAssignment_1_1; }
		
		//Sentence
		public RuleCall getFinSentenceParserRuleCall_1_1_0() { return cFinSentenceParserRuleCall_1_1_0; }
	}
	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Delay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDelAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cDelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelSentenceParserRuleCall_2_0 = (RuleCall)cDelAssignment_2.eContents().get(0);
		
		//Delay:
		//    'within' {Del} del=Sentence
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'within' {Del} del=Sentence
		public Group getGroup() { return cGroup; }
		
		//'within'
		public Keyword getWithinKeyword_0() { return cWithinKeyword_0; }
		
		//{Del}
		public Action getDelAction_1() { return cDelAction_1; }
		
		//del=Sentence
		public Assignment getDelAssignment_2() { return cDelAssignment_2; }
		
		//Sentence
		public RuleCall getDelSentenceParserRuleCall_2_0() { return cDelSentenceParserRuleCall_2_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Sentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Sentence:
		//    '"' (ID | INTEGER)+ '"'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'"' (ID | INTEGER)+ '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(ID | INTEGER)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1_1() { return cINTEGERTerminalRuleCall_1_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Comma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//Comma: ',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// объявление переменных
		//VariableType returns ecore::EString:
		//    'BOOL' | 'INT';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'INT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'INT'
		public Keyword getINTKeyword_1() { return cINTKeyword_1; }
	}
	public class DeclVarInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DeclVarInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclVarInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_INPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarDeclsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarDeclsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclVarInput:
		//    {DeclVarInput}
		//    'VAR_INPUT'
		//    (varDecls+=VarDeclaration ';')+
		//     'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclVarInput}
		//'VAR_INPUT'
		//(varDecls+=VarDeclaration ';')+
		// 'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{DeclVarInput}
		public Action getDeclVarInputAction_0() { return cDeclVarInputAction_0; }
		
		//'VAR_INPUT'
		public Keyword getVAR_INPUTKeyword_1() { return cVAR_INPUTKeyword_1; }
		
		//(varDecls+=VarDeclaration ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//varDecls+=VarDeclaration
		public Assignment getVarDeclsAssignment_2_0() { return cVarDeclsAssignment_2_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclsVarDeclarationParserRuleCall_2_0_0() { return cVarDeclsVarDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class DeclVarOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DeclVarOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclVarOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_OUTPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarDeclsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarDeclsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclVarOutput:
		//    {DeclVarOutput}
		//    'VAR_OUTPUT'
		//    (varDecls+=VarDeclaration ';')+
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclVarOutput}
		//'VAR_OUTPUT'
		//(varDecls+=VarDeclaration ';')+
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{DeclVarOutput}
		public Action getDeclVarOutputAction_0() { return cDeclVarOutputAction_0; }
		
		//'VAR_OUTPUT'
		public Keyword getVAR_OUTPUTKeyword_1() { return cVAR_OUTPUTKeyword_1; }
		
		//(varDecls+=VarDeclaration ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//varDecls+=VarDeclaration
		public Assignment getVarDeclsAssignment_2_0() { return cVarDeclsAssignment_2_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclsVarDeclarationParserRuleCall_2_0_0() { return cVarDeclsVarDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//VarDeclaration:
		//    name=ID ':' type=VariableType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=VariableType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=VariableType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_2_0() { return cTypeVariableTypeParserRuleCall_2_0; }
	}
	public class SentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.SentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclSentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSENTENCEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSentenceDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentenceDeclarationSentenceParserRuleCall_3_0 = (RuleCall)cSentenceDeclarationAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLogicExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLogicExpressionExpressionParserRuleCall_5_0 = (RuleCall)cLogicExpressionAssignment_5.eContents().get(0);
		private final Keyword cEND_SENTENCEKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// объявление предложения
		//SentDeclaration:
		//    {DeclSent}
		//    'SENTENCE' name=ID
		//    sentenceDeclaration=Sentence '=' logicExpression=Expression
		//    'END_SENTENCE';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclSent}
		//'SENTENCE' name=ID
		//sentenceDeclaration=Sentence '=' logicExpression=Expression
		//'END_SENTENCE'
		public Group getGroup() { return cGroup; }
		
		//{DeclSent}
		public Action getDeclSentAction_0() { return cDeclSentAction_0; }
		
		//'SENTENCE'
		public Keyword getSENTENCEKeyword_1() { return cSENTENCEKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//sentenceDeclaration=Sentence
		public Assignment getSentenceDeclarationAssignment_3() { return cSentenceDeclarationAssignment_3; }
		
		//Sentence
		public RuleCall getSentenceDeclarationSentenceParserRuleCall_3_0() { return cSentenceDeclarationSentenceParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//logicExpression=Expression
		public Assignment getLogicExpressionAssignment_5() { return cLogicExpressionAssignment_5; }
		
		//Expression
		public RuleCall getLogicExpressionExpressionParserRuleCall_5_0() { return cLogicExpressionExpressionParserRuleCall_5_0; }
		
		//'END_SENTENCE'
		public Keyword getEND_SENTENCEKeyword_6() { return cEND_SENTENCEKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOrOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrOpOR_OPERATORTerminalRuleCall_1_1_0 = (RuleCall)cOrOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//    XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//orOp=OR_OPERATOR
		public Assignment getOrOpAssignment_1_1() { return cOrOpAssignment_1_1; }
		
		//OR_OPERATOR
		public RuleCall getOrOpOR_OPERATORTerminalRuleCall_1_1_0() { return cOrOpOR_OPERATORTerminalRuleCall_1_1_0; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cXOR_OPERATORParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression:
		//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//XOR_OPERATOR
		public RuleCall getXOR_OPERATORParserRuleCall_1_1() { return cXOR_OPERATORParserRuleCall_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class XOR_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.XOR_OPERATOR");
		private final Keyword cXORKeyword = (Keyword)rule.eContents().get(1);
		
		//XOR_OPERATOR:
		//    'XOR';
		@Override public ParserRule getRule() { return rule; }
		
		//'XOR'
		public Keyword getXORKeyword() { return cXORKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAndOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndOpAND_OPERATORParserRuleCall_1_1_0 = (RuleCall)cAndOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression:
		//    CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*
		public Group getGroup() { return cGroup; }
		
		//CompExpression
		public RuleCall getCompExpressionParserRuleCall_0() { return cCompExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//andOp=AND_OPERATOR
		public Assignment getAndOpAssignment_1_1() { return cAndOpAssignment_1_1; }
		
		//AND_OPERATOR
		public RuleCall getAndOpAND_OPERATORParserRuleCall_1_1_0() { return cAndOpAND_OPERATORParserRuleCall_1_1_0; }
		
		//right=CompExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CompExpression
		public RuleCall getRightCompExpressionParserRuleCall_1_2_0() { return cRightCompExpressionParserRuleCall_1_2_0; }
	}
	public class AND_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.AND_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AND_OPERATOR:
		//    '&&' | 'AND';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' | 'AND'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompOpCompOperatorEnumRuleCall_1_1_0 = (RuleCall)cCompOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CompExpression:
		//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//EquExpression
		public RuleCall getEquExpressionParserRuleCall_0() { return cEquExpressionParserRuleCall_0; }
		
		//({CompExpression.left=current} compOp=CompOperator right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CompExpression.left=current}
		public Action getCompExpressionLeftAction_1_0() { return cCompExpressionLeftAction_1_0; }
		
		//compOp=CompOperator
		public Assignment getCompOpAssignment_1_1() { return cCompOpAssignment_1_1; }
		
		//CompOperator
		public RuleCall getCompOpCompOperatorEnumRuleCall_1_1_0() { return cCompOpCompOperatorEnumRuleCall_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class EquExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.EquExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEquOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEquOpEquOperatorEnumRuleCall_1_1_0 = (RuleCall)cEquOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EquExpression:
		//    UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnExpression
		public RuleCall getUnExpressionParserRuleCall_0() { return cUnExpressionParserRuleCall_0; }
		
		//({EquExpression.left=current} equOp=EquOperator right=UnExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EquExpression.left=current}
		public Action getEquExpressionLeftAction_1_0() { return cEquExpressionLeftAction_1_0; }
		
		//equOp=EquOperator
		public Assignment getEquOpAssignment_1_1() { return cEquOpAssignment_1_1; }
		
		//EquOperator
		public RuleCall getEquOpEquOperatorEnumRuleCall_1_1_0() { return cEquOpEquOperatorEnumRuleCall_1_1_0; }
		
		//right=UnExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnExpression
		public RuleCall getRightUnExpressionParserRuleCall_1_2_0() { return cRightUnExpressionParserRuleCall_1_2_0; }
	}
	public class UnOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.UnOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cREKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHIGHKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLOWKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//UnOperator returns ecore::EString:
		//    NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW' ;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotOperator
		public RuleCall getNotOperatorParserRuleCall_0() { return cNotOperatorParserRuleCall_0; }
		
		//'FE'
		public Keyword getFEKeyword_1() { return cFEKeyword_1; }
		
		//'RE'
		public Keyword getREKeyword_2() { return cREKeyword_2; }
		
		//'HIGH'
		public Keyword getHIGHKeyword_3() { return cHIGHKeyword_3; }
		
		//'LOW'
		public Keyword getLOWKeyword_4() { return cLOWKeyword_4; }
	}
	public class NotOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.NotOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NotOperator:
		//    'NOT' | '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT'
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
	}
	public class UnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.UnExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnOpUnOperatorParserRuleCall_1_0_0 = (RuleCall)cUnOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnExpression:
		//    PrimaryExpression | unOp=UnOperator right=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression | unOp=UnOperator right=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//unOp=UnOperator right=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//unOp=UnOperator
		public Assignment getUnOpAssignment_1_0() { return cUnOpAssignment_1_0; }
		
		//UnOperator
		public RuleCall getUnOpUnOperatorParserRuleCall_1_0_0() { return cUnOpUnOperatorParserRuleCall_1_0_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class TauExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.TauExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTAUKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeLiteralParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TauExpression:
		//    'TAU' '(' (time=TimeLiteral) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAU' '(' (time=TimeLiteral) ')'
		public Group getGroup() { return cGroup; }
		
		//'TAU'
		public Keyword getTAUKeyword_0() { return cTAUKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(time=TimeLiteral)
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//TimeLiteral
		public RuleCall getTimeTimeLiteralParserRuleCall_2_0() { return cTimeTimeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.TimeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTIME_PREF_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIntervalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntervalINTERVALTerminalRuleCall_1_0 = (RuleCall)cIntervalAssignment_1.eContents().get(0);
		
		//TimeLiteral:
		//     TIME_PREF_LITERAL interval=INTERVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//TIME_PREF_LITERAL interval=INTERVAL
		public Group getGroup() { return cGroup; }
		
		//TIME_PREF_LITERAL
		public RuleCall getTIME_PREF_LITERALParserRuleCall_0() { return cTIME_PREF_LITERALParserRuleCall_0; }
		
		//interval=INTERVAL
		public Assignment getIntervalAssignment_1() { return cIntervalAssignment_1; }
		
		//INTERVAL
		public RuleCall getIntervalINTERVALTerminalRuleCall_1_0() { return cIntervalINTERVALTerminalRuleCall_1_0; }
	}
	public class TIME_PREF_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.TIME_PREF_LITERAL");
		private final Keyword cTKeyword = (Keyword)rule.eContents().get(1);
		
		//TIME_PREF_LITERAL returns ecore::EString:
		//    '#T';
		@Override public ParserRule getRule() { return rule; }
		
		//'#T'
		public Keyword getTKeyword() { return cTKeyword; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cTauAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTauTauExpressionParserRuleCall_1_0 = (RuleCall)cTauAssignment_1.eContents().get(0);
		private final Assignment cVAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVIDTerminalRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNestExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNestExprExpressionParserRuleCall_3_1_0 = (RuleCall)cNestExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryExpression:
		//    constant=Constant | tau=TauExpression | v=ID | '(' nestExpr=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//constant=Constant | tau=TauExpression | v=ID | '(' nestExpr=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constant=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//tau=TauExpression
		public Assignment getTauAssignment_1() { return cTauAssignment_1; }
		
		//TauExpression
		public RuleCall getTauTauExpressionParserRuleCall_1_0() { return cTauTauExpressionParserRuleCall_1_0; }
		
		//v=ID
		public Assignment getVAssignment_2() { return cVAssignment_2; }
		
		//ID
		public RuleCall getVIDTerminalRuleCall_2_0() { return cVIDTerminalRuleCall_2_0; }
		
		//'(' nestExpr=Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//nestExpr=Expression
		public Assignment getNestExprAssignment_3_1() { return cNestExprAssignment_3_1; }
		
		//Expression
		public RuleCall getNestExprExpressionParserRuleCall_3_1_0() { return cNestExprExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEAN_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constant:
		//    INTEGER | BOOLEAN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER | BOOLEAN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }
		
		//BOOLEAN_LITERAL
		public RuleCall getBOOLEAN_LITERALTerminalRuleCall_1() { return cBOOLEAN_LITERALTerminalRuleCall_1; }
	}
	
	public class EquOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.EquOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EquOperator:
		//    EQUAL='==' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='==' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='=='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class CompOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQULessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_EQUEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompOperator:
		//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQU='<='
		public EnumLiteralDeclaration getLESS_EQUEnumLiteralDeclaration_2() { return cLESS_EQUEnumLiteralDeclaration_2; }
		
		//'<='
		public Keyword getLESS_EQULessThanSignEqualsSignKeyword_2_0() { return cLESS_EQULessThanSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQU='>='
		public EnumLiteralDeclaration getGREATER_EQUEnumLiteralDeclaration_3() { return cGREATER_EQUEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final ReqDeclarationElements pReqDeclaration;
	private final RequirementElements pRequirement;
	private final TrigElements pTrig;
	private final InvElements pInv;
	private final Inv_alwaysElements pInv_always;
	private final RelReaElements pRelRea;
	private final ReactionElements pReaction;
	private final DelFinElements pDelFin;
	private final DelayElements pDelay;
	private final SentenceElements pSentence;
	private final CommaElements pComma;
	private final VariableTypeElements pVariableType;
	private final DeclVarInputElements pDeclVarInput;
	private final DeclVarOutputElements pDeclVarOutput;
	private final VarDeclarationElements pVarDeclaration;
	private final SentDeclarationElements pSentDeclaration;
	private final ExpressionElements pExpression;
	private final TerminalRule tOR_OPERATOR;
	private final XorExpressionElements pXorExpression;
	private final XOR_OPERATORElements pXOR_OPERATOR;
	private final AndExpressionElements pAndExpression;
	private final AND_OPERATORElements pAND_OPERATOR;
	private final CompExpressionElements pCompExpression;
	private final EquExpressionElements pEquExpression;
	private final EquOperatorElements eEquOperator;
	private final CompOperatorElements eCompOperator;
	private final UnOperatorElements pUnOperator;
	private final NotOperatorElements pNotOperator;
	private final UnExpressionElements pUnExpression;
	private final TauExpressionElements pTauExpression;
	private final TimeLiteralElements pTimeLiteral;
	private final TIME_PREF_LITERALElements pTIME_PREF_LITERAL;
	private final TerminalRule tINTERVAL;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ConstantElements pConstant;
	private final TerminalRule tDIRECT_VARIABLE;
	private final TerminalRule tDIRECT_TYPE_PREFIX;
	private final TerminalRule tDIRECT_SIZE_PREFIX;
	private final TerminalRule tINTEGER;
	private final TerminalRule tLETTER;
	private final TerminalRule tBIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tBOOLEAN_LITERAL;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CNLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pReqDeclaration = new ReqDeclarationElements();
		this.pRequirement = new RequirementElements();
		this.pTrig = new TrigElements();
		this.pInv = new InvElements();
		this.pInv_always = new Inv_alwaysElements();
		this.pRelRea = new RelReaElements();
		this.pReaction = new ReactionElements();
		this.pDelFin = new DelFinElements();
		this.pDelay = new DelayElements();
		this.pSentence = new SentenceElements();
		this.pComma = new CommaElements();
		this.pVariableType = new VariableTypeElements();
		this.pDeclVarInput = new DeclVarInputElements();
		this.pDeclVarOutput = new DeclVarOutputElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pSentDeclaration = new SentDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.tOR_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.OR_OPERATOR");
		this.pXorExpression = new XorExpressionElements();
		this.pXOR_OPERATOR = new XOR_OPERATORElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAND_OPERATOR = new AND_OPERATORElements();
		this.pCompExpression = new CompExpressionElements();
		this.pEquExpression = new EquExpressionElements();
		this.eEquOperator = new EquOperatorElements();
		this.eCompOperator = new CompOperatorElements();
		this.pUnOperator = new UnOperatorElements();
		this.pNotOperator = new NotOperatorElements();
		this.pUnExpression = new UnExpressionElements();
		this.pTauExpression = new TauExpressionElements();
		this.pTimeLiteral = new TimeLiteralElements();
		this.pTIME_PREF_LITERAL = new TIME_PREF_LITERALElements();
		this.tINTERVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.INTERVAL");
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstant = new ConstantElements();
		this.tDIRECT_VARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DIRECT_VARIABLE");
		this.tDIRECT_TYPE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DIRECT_TYPE_PREFIX");
		this.tDIRECT_SIZE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DIRECT_SIZE_PREFIX");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.INTEGER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.LETTER");
		this.tBIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.BIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.OCTAL_DIGIT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.HEX_DIGIT");
		this.tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.BOOLEAN_LITERAL");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.CNL.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.CNL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Model:
	////    (requirements+=Requirement '.')*;
	//Model:
	//(
	//    declVarInput+=DeclVarInput |
	//    declVarOutput+=DeclVarOutput |
	//    sentDeclaration+=SentDeclaration |
	//    reqDeclaration+=ReqDeclaration
	//)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// грамматика для требований
	//ReqDeclaration:
	//    'REQUIREMENT'
	//    name=ID
	//    requirement=Requirement
	//    'END_REQUIREMENT'
	//;
	public ReqDeclarationElements getReqDeclarationAccess() {
		return pReqDeclaration;
	}
	
	public ParserRule getReqDeclarationRule() {
		return getReqDeclarationAccess().getRule();
	}
	
	//Requirement:
	//    (trigger=Trig
	//    | invariant=Inv_always) '.';
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//Trig:
	//    (
	//        {Trig} ('After' trig=Sentence Comma)
	//        | 'Always'
	//    )
	//    (invariant=Inv | release_reaction=RelRea | delay_final=DelFin)
	//;
	public TrigElements getTrigAccess() {
		return pTrig;
	}
	
	public ParserRule getTrigRule() {
		return getTrigAccess().getRule();
	}
	
	//Inv:
	//    (
	//        {Inv} inv=Sentence
	//        ((Comma delay_final=DelFin) |
	//            ('should' 'remain' 'valid' 'until' release_reaction=RelRea))?
	//    )
	//;
	public InvElements getInvAccess() {
		return pInv;
	}
	
	public ParserRule getInvRule() {
		return getInvAccess().getRule();
	}
	
	//Inv_always:
	//    {Inv_always}
	//    (
	//        inv=Sentence 'should' 'always' 'remain' 'valid' 'until' release_reaction=RelRea
	//    )
	//;
	public Inv_alwaysElements getInv_alwaysAccess() {
		return pInv_always;
	}
	
	public ParserRule getInv_alwaysRule() {
		return getInv_alwaysAccess().getRule();
	}
	
	//RelRea:
	//    (
	//        'either' {Rel} rel=Sentence 'or' reaction=Reaction (Comma delay_final=DelFin)?
	//    ) |
	//    {Rel}
	//    (
	//        rel=Sentence
	//    ) |
	//    {Rea}
	//    (
	//        reaction=Reaction (Comma delay_final=DelFin)?
	//    ) |
	//    {Rea}
	//    (
	//        'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
	//    )
	//;
	public RelReaElements getRelReaAccess() {
		return pRelRea;
	}
	
	public ParserRule getRelReaRule() {
		return getRelReaAccess().getRule();
	}
	
	//Reaction:
	//    {Rea} 'reaction' 'is' rea=Sentence
	//;
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//DelFin:
	//    {Sentence}
	//    (
	//        (
	//            ('which' 'must' 'occur' )
	//                (
	//                    (delay=Delay ('from' fin=Sentence)?)
	//                    | (('immediately')? 'after' fin=Sentence)
	//                )
	//        )
	//        | fin=Sentence
	//    )
	//;
	public DelFinElements getDelFinAccess() {
		return pDelFin;
	}
	
	public ParserRule getDelFinRule() {
		return getDelFinAccess().getRule();
	}
	
	//Delay:
	//    'within' {Del} del=Sentence
	//;
	public DelayElements getDelayAccess() {
		return pDelay;
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}
	
	//Sentence:
	//    '"' (ID | INTEGER)+ '"'
	//;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Comma: ',';
	public CommaElements getCommaAccess() {
		return pComma;
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}
	
	//// объявление переменных
	//VariableType returns ecore::EString:
	//    'BOOL' | 'INT';
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//DeclVarInput:
	//    {DeclVarInput}
	//    'VAR_INPUT'
	//    (varDecls+=VarDeclaration ';')+
	//     'END_VAR';
	public DeclVarInputElements getDeclVarInputAccess() {
		return pDeclVarInput;
	}
	
	public ParserRule getDeclVarInputRule() {
		return getDeclVarInputAccess().getRule();
	}
	
	//DeclVarOutput:
	//    {DeclVarOutput}
	//    'VAR_OUTPUT'
	//    (varDecls+=VarDeclaration ';')+
	//    'END_VAR';
	public DeclVarOutputElements getDeclVarOutputAccess() {
		return pDeclVarOutput;
	}
	
	public ParserRule getDeclVarOutputRule() {
		return getDeclVarOutputAccess().getRule();
	}
	
	//VarDeclaration:
	//    name=ID ':' type=VariableType;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//// объявление предложения
	//SentDeclaration:
	//    {DeclSent}
	//    'SENTENCE' name=ID
	//    sentenceDeclaration=Sentence '=' logicExpression=Expression
	//    'END_SENTENCE';
	public SentDeclarationElements getSentDeclarationAccess() {
		return pSentDeclaration;
	}
	
	public ParserRule getSentDeclarationRule() {
		return getSentDeclarationAccess().getRule();
	}
	
	//Expression:
	//    XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal OR_OPERATOR:
	//    '||' | 'OR';
	public TerminalRule getOR_OPERATORRule() {
		return tOR_OPERATOR;
	}
	
	//XorExpression:
	//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XOR_OPERATOR:
	//    'XOR';
	public XOR_OPERATORElements getXOR_OPERATORAccess() {
		return pXOR_OPERATOR;
	}
	
	public ParserRule getXOR_OPERATORRule() {
		return getXOR_OPERATORAccess().getRule();
	}
	
	//AndExpression:
	//    CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AND_OPERATOR:
	//    '&&' | 'AND';
	public AND_OPERATORElements getAND_OPERATORAccess() {
		return pAND_OPERATOR;
	}
	
	public ParserRule getAND_OPERATORRule() {
		return getAND_OPERATORAccess().getRule();
	}
	
	//CompExpression:
	//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*;
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//EquExpression:
	//    UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*;
	public EquExpressionElements getEquExpressionAccess() {
		return pEquExpression;
	}
	
	public ParserRule getEquExpressionRule() {
		return getEquExpressionAccess().getRule();
	}
	
	//enum EquOperator:
	//    EQUAL='==' | NOT_EQUAL='<>';
	public EquOperatorElements getEquOperatorAccess() {
		return eEquOperator;
	}
	
	public EnumRule getEquOperatorRule() {
		return getEquOperatorAccess().getRule();
	}
	
	//enum CompOperator:
	//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
	public CompOperatorElements getCompOperatorAccess() {
		return eCompOperator;
	}
	
	public EnumRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//UnOperator returns ecore::EString:
	//    NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW' ;
	public UnOperatorElements getUnOperatorAccess() {
		return pUnOperator;
	}
	
	public ParserRule getUnOperatorRule() {
		return getUnOperatorAccess().getRule();
	}
	
	//NotOperator:
	//    'NOT' | '!';
	public NotOperatorElements getNotOperatorAccess() {
		return pNotOperator;
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//UnExpression:
	//    PrimaryExpression | unOp=UnOperator right=PrimaryExpression;
	public UnExpressionElements getUnExpressionAccess() {
		return pUnExpression;
	}
	
	public ParserRule getUnExpressionRule() {
		return getUnExpressionAccess().getRule();
	}
	
	//TauExpression:
	//    'TAU' '(' (time=TimeLiteral) ')';
	public TauExpressionElements getTauExpressionAccess() {
		return pTauExpression;
	}
	
	public ParserRule getTauExpressionRule() {
		return getTauExpressionAccess().getRule();
	}
	
	//TimeLiteral:
	//     TIME_PREF_LITERAL interval=INTERVAL;
	public TimeLiteralElements getTimeLiteralAccess() {
		return pTimeLiteral;
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}
	
	//TIME_PREF_LITERAL returns ecore::EString:
	//    '#T';
	public TIME_PREF_LITERALElements getTIME_PREF_LITERALAccess() {
		return pTIME_PREF_LITERAL;
	}
	
	public ParserRule getTIME_PREF_LITERALRule() {
		return getTIME_PREF_LITERALAccess().getRule();
	}
	
	//terminal INTERVAL returns ecore::EString:
	//    (INTEGER 'd')? (INTEGER 'h')? (INTEGER 'm')? (INTEGER 's')? (INTEGER 'ms')?;
	public TerminalRule getINTERVALRule() {
		return tINTERVAL;
	}
	
	//PrimaryExpression:
	//    constant=Constant | tau=TauExpression | v=ID | '(' nestExpr=Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Constant:
	//    INTEGER | BOOLEAN_LITERAL;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	// // терминальные правила
	//terminal DIRECT_VARIABLE returns ecore::EString:
	//    '%' DIRECT_TYPE_PREFIX DIRECT_SIZE_PREFIX OCTAL_DIGIT ('.' OCTAL_DIGIT)*;
	public TerminalRule getDIRECT_VARIABLERule() {
		return tDIRECT_VARIABLE;
	}
	
	//terminal fragment DIRECT_TYPE_PREFIX:
	//    'I' | 'Q' | 'M';
	public TerminalRule getDIRECT_TYPE_PREFIXRule() {
		return tDIRECT_TYPE_PREFIX;
	}
	
	//terminal fragment DIRECT_SIZE_PREFIX:
	//    'X' | 'B' | 'W' | 'D' | 'L';
	public TerminalRule getDIRECT_SIZE_PREFIXRule() {
		return tDIRECT_SIZE_PREFIX;
	}
	
	//terminal INTEGER returns ecore::EString:
	//    DIGIT+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal fragment LETTER:
	//    'A'..'Z' | 'a'..'z' | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment BIT:
	//    '0' | '1';
	public TerminalRule getBITRule() {
		return tBIT;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//    '0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal fragment DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment HEX_DIGIT:
	//    DIGIT | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal BOOLEAN_LITERAL:
	//    'TRUE' | 'FALSE';
	public TerminalRule getBOOLEAN_LITERALRule() {
		return tBOOLEAN_LITERAL;
	}
	
	//// @Override
	//// terminal ID returns ecore::EString:
	////    LETTER (LETTER | DIGIT)*;
	//@Override
	//terminal ML_COMMENT:
	//    '/*' -> '*/' | '(*' -> '*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal STRING:
	//    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//@Override
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
