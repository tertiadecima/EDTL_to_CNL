/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.cNL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.cNL.CNLPackage;
import org.xtext.example.cNL.Inv_always;
import org.xtext.example.cNL.RelRea;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inv always</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.cNL.impl.Inv_alwaysImpl#getInv <em>Inv</em>}</li>
 *   <li>{@link org.xtext.example.cNL.impl.Inv_alwaysImpl#getRelease_reaction <em>Release reaction</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Inv_alwaysImpl extends MinimalEObjectImpl.Container implements Inv_always
{
  /**
   * The default value of the '{@link #getInv() <em>Inv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInv()
   * @generated
   * @ordered
   */
  protected static final String INV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInv() <em>Inv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInv()
   * @generated
   * @ordered
   */
  protected String inv = INV_EDEFAULT;

  /**
   * The cached value of the '{@link #getRelease_reaction() <em>Release reaction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelease_reaction()
   * @generated
   * @ordered
   */
  protected RelRea release_reaction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Inv_alwaysImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CNLPackage.Literals.INV_ALWAYS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInv()
  {
    return inv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInv(String newInv)
  {
    String oldInv = inv;
    inv = newInv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.INV_ALWAYS__INV, oldInv, inv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelRea getRelease_reaction()
  {
    return release_reaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelease_reaction(RelRea newRelease_reaction, NotificationChain msgs)
  {
    RelRea oldRelease_reaction = release_reaction;
    release_reaction = newRelease_reaction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNLPackage.INV_ALWAYS__RELEASE_REACTION, oldRelease_reaction, newRelease_reaction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelease_reaction(RelRea newRelease_reaction)
  {
    if (newRelease_reaction != release_reaction)
    {
      NotificationChain msgs = null;
      if (release_reaction != null)
        msgs = ((InternalEObject)release_reaction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNLPackage.INV_ALWAYS__RELEASE_REACTION, null, msgs);
      if (newRelease_reaction != null)
        msgs = ((InternalEObject)newRelease_reaction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNLPackage.INV_ALWAYS__RELEASE_REACTION, null, msgs);
      msgs = basicSetRelease_reaction(newRelease_reaction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.INV_ALWAYS__RELEASE_REACTION, newRelease_reaction, newRelease_reaction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CNLPackage.INV_ALWAYS__RELEASE_REACTION:
        return basicSetRelease_reaction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CNLPackage.INV_ALWAYS__INV:
        return getInv();
      case CNLPackage.INV_ALWAYS__RELEASE_REACTION:
        return getRelease_reaction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CNLPackage.INV_ALWAYS__INV:
        setInv((String)newValue);
        return;
      case CNLPackage.INV_ALWAYS__RELEASE_REACTION:
        setRelease_reaction((RelRea)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.INV_ALWAYS__INV:
        setInv(INV_EDEFAULT);
        return;
      case CNLPackage.INV_ALWAYS__RELEASE_REACTION:
        setRelease_reaction((RelRea)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.INV_ALWAYS__INV:
        return INV_EDEFAULT == null ? inv != null : !INV_EDEFAULT.equals(inv);
      case CNLPackage.INV_ALWAYS__RELEASE_REACTION:
        return release_reaction != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inv: ");
    result.append(inv);
    result.append(')');
    return result.toString();
  }

} //Inv_alwaysImpl
