/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.cNL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.cNL.CNLPackage;
import org.xtext.example.cNL.DelFin;
import org.xtext.example.cNL.Inv;
import org.xtext.example.cNL.RelRea;
import org.xtext.example.cNL.SentenceDeclaration;
import org.xtext.example.cNL.Trig;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trig</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.cNL.impl.TrigImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.cNL.impl.TrigImpl#getInvariant <em>Invariant</em>}</li>
 *   <li>{@link org.xtext.example.cNL.impl.TrigImpl#getRelease_reaction <em>Release reaction</em>}</li>
 *   <li>{@link org.xtext.example.cNL.impl.TrigImpl#getDelay_final <em>Delay final</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TrigImpl extends MinimalEObjectImpl.Container implements Trig
{
  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected SentenceDeclaration name;

  /**
   * The cached value of the '{@link #getInvariant() <em>Invariant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvariant()
   * @generated
   * @ordered
   */
  protected Inv invariant;

  /**
   * The cached value of the '{@link #getRelease_reaction() <em>Release reaction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelease_reaction()
   * @generated
   * @ordered
   */
  protected RelRea release_reaction;

  /**
   * The cached value of the '{@link #getDelay_final() <em>Delay final</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDelay_final()
   * @generated
   * @ordered
   */
  protected DelFin delay_final;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TrigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CNLPackage.Literals.TRIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentenceDeclaration getName()
  {
    if (name != null && name.eIsProxy())
    {
      InternalEObject oldName = (InternalEObject)name;
      name = (SentenceDeclaration)eResolveProxy(oldName);
      if (name != oldName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CNLPackage.TRIG__NAME, oldName, name));
      }
    }
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SentenceDeclaration basicGetName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(SentenceDeclaration newName)
  {
    SentenceDeclaration oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inv getInvariant()
  {
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInvariant(Inv newInvariant, NotificationChain msgs)
  {
    Inv oldInvariant = invariant;
    invariant = newInvariant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__INVARIANT, oldInvariant, newInvariant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInvariant(Inv newInvariant)
  {
    if (newInvariant != invariant)
    {
      NotificationChain msgs = null;
      if (invariant != null)
        msgs = ((InternalEObject)invariant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__INVARIANT, null, msgs);
      if (newInvariant != null)
        msgs = ((InternalEObject)newInvariant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__INVARIANT, null, msgs);
      msgs = basicSetInvariant(newInvariant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__INVARIANT, newInvariant, newInvariant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelRea getRelease_reaction()
  {
    return release_reaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelease_reaction(RelRea newRelease_reaction, NotificationChain msgs)
  {
    RelRea oldRelease_reaction = release_reaction;
    release_reaction = newRelease_reaction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__RELEASE_REACTION, oldRelease_reaction, newRelease_reaction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelease_reaction(RelRea newRelease_reaction)
  {
    if (newRelease_reaction != release_reaction)
    {
      NotificationChain msgs = null;
      if (release_reaction != null)
        msgs = ((InternalEObject)release_reaction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__RELEASE_REACTION, null, msgs);
      if (newRelease_reaction != null)
        msgs = ((InternalEObject)newRelease_reaction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__RELEASE_REACTION, null, msgs);
      msgs = basicSetRelease_reaction(newRelease_reaction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__RELEASE_REACTION, newRelease_reaction, newRelease_reaction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DelFin getDelay_final()
  {
    return delay_final;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDelay_final(DelFin newDelay_final, NotificationChain msgs)
  {
    DelFin oldDelay_final = delay_final;
    delay_final = newDelay_final;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__DELAY_FINAL, oldDelay_final, newDelay_final);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDelay_final(DelFin newDelay_final)
  {
    if (newDelay_final != delay_final)
    {
      NotificationChain msgs = null;
      if (delay_final != null)
        msgs = ((InternalEObject)delay_final).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__DELAY_FINAL, null, msgs);
      if (newDelay_final != null)
        msgs = ((InternalEObject)newDelay_final).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNLPackage.TRIG__DELAY_FINAL, null, msgs);
      msgs = basicSetDelay_final(newDelay_final, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.TRIG__DELAY_FINAL, newDelay_final, newDelay_final));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CNLPackage.TRIG__INVARIANT:
        return basicSetInvariant(null, msgs);
      case CNLPackage.TRIG__RELEASE_REACTION:
        return basicSetRelease_reaction(null, msgs);
      case CNLPackage.TRIG__DELAY_FINAL:
        return basicSetDelay_final(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CNLPackage.TRIG__NAME:
        if (resolve) return getName();
        return basicGetName();
      case CNLPackage.TRIG__INVARIANT:
        return getInvariant();
      case CNLPackage.TRIG__RELEASE_REACTION:
        return getRelease_reaction();
      case CNLPackage.TRIG__DELAY_FINAL:
        return getDelay_final();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CNLPackage.TRIG__NAME:
        setName((SentenceDeclaration)newValue);
        return;
      case CNLPackage.TRIG__INVARIANT:
        setInvariant((Inv)newValue);
        return;
      case CNLPackage.TRIG__RELEASE_REACTION:
        setRelease_reaction((RelRea)newValue);
        return;
      case CNLPackage.TRIG__DELAY_FINAL:
        setDelay_final((DelFin)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.TRIG__NAME:
        setName((SentenceDeclaration)null);
        return;
      case CNLPackage.TRIG__INVARIANT:
        setInvariant((Inv)null);
        return;
      case CNLPackage.TRIG__RELEASE_REACTION:
        setRelease_reaction((RelRea)null);
        return;
      case CNLPackage.TRIG__DELAY_FINAL:
        setDelay_final((DelFin)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.TRIG__NAME:
        return name != null;
      case CNLPackage.TRIG__INVARIANT:
        return invariant != null;
      case CNLPackage.TRIG__RELEASE_REACTION:
        return release_reaction != null;
      case CNLPackage.TRIG__DELAY_FINAL:
        return delay_final != null;
    }
    return super.eIsSet(featureID);
  }

} //TrigImpl
