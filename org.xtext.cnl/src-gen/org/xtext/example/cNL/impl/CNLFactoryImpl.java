/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.cNL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.cNL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CNLFactoryImpl extends EFactoryImpl implements CNLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CNLFactory init()
  {
    try
    {
      CNLFactory theCNLFactory = (CNLFactory)EPackage.Registry.INSTANCE.getEFactory(CNLPackage.eNS_URI);
      if (theCNLFactory != null)
      {
        return theCNLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CNLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CNLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CNLPackage.MODEL: return createModel();
      case CNLPackage.REQ_DECLARATION: return createReqDeclaration();
      case CNLPackage.REQUIREMENT: return createRequirement();
      case CNLPackage.TRIG: return createTrig();
      case CNLPackage.INV: return createInv();
      case CNLPackage.INV_ALWAYS: return createInv_always();
      case CNLPackage.REL_REA: return createRelRea();
      case CNLPackage.REACTION: return createReaction();
      case CNLPackage.DEL_FIN: return createDelFin();
      case CNLPackage.DELAY: return createDelay();
      case CNLPackage.DECL_VAR_INPUT: return createDeclVarInput();
      case CNLPackage.DECL_VAR_OUTPUT: return createDeclVarOutput();
      case CNLPackage.VAR_DECLARATION: return createVarDeclaration();
      case CNLPackage.SENT_DECLARATION: return createSentDeclaration();
      case CNLPackage.EXPRESSION: return createExpression();
      case CNLPackage.XOR_EXPRESSION: return createXorExpression();
      case CNLPackage.AND_EXPRESSION: return createAndExpression();
      case CNLPackage.COMP_EXPRESSION: return createCompExpression();
      case CNLPackage.EQU_EXPRESSION: return createEquExpression();
      case CNLPackage.UN_EXPRESSION: return createUnExpression();
      case CNLPackage.TAU_EXPRESSION: return createTauExpression();
      case CNLPackage.TIME_LITERAL: return createTimeLiteral();
      case CNLPackage.PRIMARY_EXPRESSION: return createPrimaryExpression();
      case CNLPackage.REL: return createRel();
      case CNLPackage.REA: return createRea();
      case CNLPackage.SENTENCE: return createSentence();
      case CNLPackage.DEL: return createDel();
      case CNLPackage.DECL_SENT: return createDeclSent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CNLPackage.EQU_OPERATOR:
        return createEquOperatorFromString(eDataType, initialValue);
      case CNLPackage.COMP_OPERATOR:
        return createCompOperatorFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CNLPackage.EQU_OPERATOR:
        return convertEquOperatorToString(eDataType, instanceValue);
      case CNLPackage.COMP_OPERATOR:
        return convertCompOperatorToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqDeclaration createReqDeclaration()
  {
    ReqDeclarationImpl reqDeclaration = new ReqDeclarationImpl();
    return reqDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trig createTrig()
  {
    TrigImpl trig = new TrigImpl();
    return trig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inv createInv()
  {
    InvImpl inv = new InvImpl();
    return inv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inv_always createInv_always()
  {
    Inv_alwaysImpl inv_always = new Inv_alwaysImpl();
    return inv_always;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelRea createRelRea()
  {
    RelReaImpl relRea = new RelReaImpl();
    return relRea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reaction createReaction()
  {
    ReactionImpl reaction = new ReactionImpl();
    return reaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DelFin createDelFin()
  {
    DelFinImpl delFin = new DelFinImpl();
    return delFin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delay createDelay()
  {
    DelayImpl delay = new DelayImpl();
    return delay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclVarInput createDeclVarInput()
  {
    DeclVarInputImpl declVarInput = new DeclVarInputImpl();
    return declVarInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclVarOutput createDeclVarOutput()
  {
    DeclVarOutputImpl declVarOutput = new DeclVarOutputImpl();
    return declVarOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentDeclaration createSentDeclaration()
  {
    SentDeclarationImpl sentDeclaration = new SentDeclarationImpl();
    return sentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XorExpression createXorExpression()
  {
    XorExpressionImpl xorExpression = new XorExpressionImpl();
    return xorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompExpression createCompExpression()
  {
    CompExpressionImpl compExpression = new CompExpressionImpl();
    return compExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EquExpression createEquExpression()
  {
    EquExpressionImpl equExpression = new EquExpressionImpl();
    return equExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnExpression createUnExpression()
  {
    UnExpressionImpl unExpression = new UnExpressionImpl();
    return unExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TauExpression createTauExpression()
  {
    TauExpressionImpl tauExpression = new TauExpressionImpl();
    return tauExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeLiteral createTimeLiteral()
  {
    TimeLiteralImpl timeLiteral = new TimeLiteralImpl();
    return timeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression createPrimaryExpression()
  {
    PrimaryExpressionImpl primaryExpression = new PrimaryExpressionImpl();
    return primaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rel createRel()
  {
    RelImpl rel = new RelImpl();
    return rel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rea createRea()
  {
    ReaImpl rea = new ReaImpl();
    return rea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sentence createSentence()
  {
    SentenceImpl sentence = new SentenceImpl();
    return sentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Del createDel()
  {
    DelImpl del = new DelImpl();
    return del;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclSent createDeclSent()
  {
    DeclSentImpl declSent = new DeclSentImpl();
    return declSent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EquOperator createEquOperatorFromString(EDataType eDataType, String initialValue)
  {
    EquOperator result = EquOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEquOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompOperator createCompOperatorFromString(EDataType eDataType, String initialValue)
  {
    CompOperator result = CompOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCompOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CNLPackage getCNLPackage()
  {
    return (CNLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CNLPackage getPackage()
  {
    return CNLPackage.eINSTANCE;
  }

} //CNLFactoryImpl
