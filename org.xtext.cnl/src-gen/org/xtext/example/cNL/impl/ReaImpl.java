/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.cNL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.cNL.CNLPackage;
import org.xtext.example.cNL.Rea;
import org.xtext.example.cNL.Sentence;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rea</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.cNL.impl.ReaImpl#getRea <em>Rea</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReaImpl extends RelReaImpl implements Rea
{
  /**
   * The cached value of the '{@link #getRea() <em>Rea</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRea()
   * @generated
   * @ordered
   */
  protected Sentence rea;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CNLPackage.Literals.REA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sentence getRea()
  {
    return rea;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRea(Sentence newRea, NotificationChain msgs)
  {
    Sentence oldRea = rea;
    rea = newRea;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CNLPackage.REA__REA, oldRea, newRea);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRea(Sentence newRea)
  {
    if (newRea != rea)
    {
      NotificationChain msgs = null;
      if (rea != null)
        msgs = ((InternalEObject)rea).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CNLPackage.REA__REA, null, msgs);
      if (newRea != null)
        msgs = ((InternalEObject)newRea).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CNLPackage.REA__REA, null, msgs);
      msgs = basicSetRea(newRea, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CNLPackage.REA__REA, newRea, newRea));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CNLPackage.REA__REA:
        return basicSetRea(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CNLPackage.REA__REA:
        return getRea();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CNLPackage.REA__REA:
        setRea((Sentence)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.REA__REA:
        setRea((Sentence)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CNLPackage.REA__REA:
        return rea != null;
    }
    return super.eIsSet(featureID);
  }

} //ReaImpl
