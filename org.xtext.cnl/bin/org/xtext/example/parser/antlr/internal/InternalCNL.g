/*
 * generated by Xtext 2.32.0
 */
grammar InternalCNL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.services.CNLGrammarAccess;

}

@parser::members {

 	private CNLGrammarAccess grammarAccess;

    public InternalCNLParser(TokenStream input, CNLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CNLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDeclVarInputDeclVarInputParserRuleCall_0_0());
				}
				lv_declVarInput_0_0=ruleDeclVarInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"declVarInput",
						lv_declVarInput_0_0,
						"org.xtext.example.CNL.DeclVarInput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDeclVarOutputDeclVarOutputParserRuleCall_1_0());
				}
				lv_declVarOutput_1_0=ruleDeclVarOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"declVarOutput",
						lv_declVarOutput_1_0,
						"org.xtext.example.CNL.DeclVarOutput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSentDeclarationSentDeclarationParserRuleCall_2_0());
				}
				lv_sentDeclaration_2_0=ruleSentDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"sentDeclaration",
						lv_sentDeclaration_2_0,
						"org.xtext.example.CNL.SentDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getReqDeclarationReqDeclarationParserRuleCall_3_0());
				}
				lv_reqDeclaration_3_0=ruleReqDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"reqDeclaration",
						lv_reqDeclaration_3_0,
						"org.xtext.example.CNL.ReqDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleVariableType
entryRuleVariableType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableTypeRule()); }
	iv_ruleVariableType=ruleVariableType
	{ $current=$iv_ruleVariableType.current.getText(); }
	EOF;

// Rule VariableType
ruleVariableType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='BOOL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeAccess().getBOOLKeyword_0());
		}
		    |
		kw='INT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeAccess().getINTKeyword_1());
		}
	)
;

// Entry rule entryRuleDeclVarInput
entryRuleDeclVarInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclVarInputRule()); }
	iv_ruleDeclVarInput=ruleDeclVarInput
	{ $current=$iv_ruleDeclVarInput.current; }
	EOF;

// Rule DeclVarInput
ruleDeclVarInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclVarInputAccess().getDeclVarInputAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_INPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclVarInputAccess().getVAR_INPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclVarInputAccess().getVarDeclsVarDeclarationParserRuleCall_2_0_0());
					}
					lv_varDecls_2_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclVarInputRule());
						}
						add(
							$current,
							"varDecls",
							lv_varDecls_2_0,
							"org.xtext.example.CNL.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclVarInputAccess().getSemicolonKeyword_2_1());
			}
		)+
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeclVarInputAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleDeclVarOutput
entryRuleDeclVarOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclVarOutputRule()); }
	iv_ruleDeclVarOutput=ruleDeclVarOutput
	{ $current=$iv_ruleDeclVarOutput.current; }
	EOF;

// Rule DeclVarOutput
ruleDeclVarOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclVarOutputAccess().getDeclVarOutputAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_OUTPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclVarOutputAccess().getVAR_OUTPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclVarOutputAccess().getVarDeclsVarDeclarationParserRuleCall_2_0_0());
					}
					lv_varDecls_2_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclVarOutputRule());
						}
						add(
							$current,
							"varDecls",
							lv_varDecls_2_0,
							"org.xtext.example.CNL.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclVarOutputAccess().getSemicolonKeyword_2_1());
			}
		)+
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeclVarOutputAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeVariableTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleVariableType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.CNL.VariableType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSentDeclaration
entryRuleSentDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentDeclarationRule()); }
	iv_ruleSentDeclaration=ruleSentDeclaration
	{ $current=$iv_ruleSentDeclaration.current; }
	EOF;

// Rule SentDeclaration
ruleSentDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSentDeclarationAccess().getSentDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='SENTENCE'
		{
			newLeafNode(otherlv_1, grammarAccess.getSentDeclarationAccess().getSENTENCEKeyword_1());
		}
		(
			(
				lv_DeclarationName_2_0=RULE_ID
				{
					newLeafNode(lv_DeclarationName_2_0, grammarAccess.getSentDeclarationAccess().getDeclarationNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSentDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"DeclarationName",
						lv_DeclarationName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSentDeclarationAccess().getSentenceDeclarationSentenceDeclarationParserRuleCall_3_0());
				}
				lv_sentenceDeclaration_3_0=ruleSentenceDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentDeclarationRule());
					}
					set(
						$current,
						"sentenceDeclaration",
						lv_sentenceDeclaration_3_0,
						"org.xtext.example.CNL.SentenceDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='END_SENTENCE'
		{
			newLeafNode(otherlv_4, grammarAccess.getSentDeclarationAccess().getEND_SENTENCEKeyword_4());
		}
	)
;

// Entry rule entryRuleSentenceDeclaration
entryRuleSentenceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceDeclarationRule()); }
	iv_ruleSentenceDeclaration=ruleSentenceDeclaration
	{ $current=$iv_ruleSentenceDeclaration.current; }
	EOF;

// Rule SentenceDeclaration
ruleSentenceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSentenceDeclarationAccess().getSentenceDeclarationAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceDeclarationAccess().getNameSentenceParserRuleCall_1_0());
				}
				lv_name_1_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.CNL.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getSentenceDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceDeclarationAccess().getLogicExpressionExpressionParserRuleCall_3_0());
				}
				lv_logicExpression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceDeclarationRule());
					}
					set(
						$current,
						"logicExpression",
						lv_logicExpression_3_0,
						"org.xtext.example.CNL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_orOp_2_0=RULE_OR_OPERATOR
					{
						newLeafNode(lv_orOp_2_0, grammarAccess.getExpressionAccess().getOrOpOR_OPERATORTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"orOp",
							lv_orOp_2_0,
							"org.xtext.example.CNL.OR_OPERATOR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.CNL.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getXorExpressionAccess().getXOR_OPERATORParserRuleCall_1_1());
			}
			ruleXOR_OPERATOR
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.CNL.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXOR_OPERATOR
entryRuleXOR_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXOR_OPERATORRule()); }
	iv_ruleXOR_OPERATOR=ruleXOR_OPERATOR
	{ $current=$iv_ruleXOR_OPERATOR.current.getText(); }
	EOF;

// Rule XOR_OPERATOR
ruleXOR_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='XOR'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getXOR_OPERATORAccess().getXORKeyword());
	}
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0());
		}
		this_CompExpression_0=ruleCompExpression
		{
			$current = $this_CompExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getAndOpAND_OPERATORParserRuleCall_1_1_0());
					}
					lv_andOp_2_0=ruleAND_OPERATOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"andOp",
							lv_andOp_2_0,
							"org.xtext.example.CNL.AND_OPERATOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.CNL.CompExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAND_OPERATOR
entryRuleAND_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAND_OPERATORRule()); }
	iv_ruleAND_OPERATOR=ruleAND_OPERATOR
	{ $current=$iv_ruleAND_OPERATOR.current.getText(); }
	EOF;

// Rule AND_OPERATOR
ruleAND_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getANDKeyword_0());
		}
		    |
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_1());
		}
	)
;

// Entry rule entryRuleCompExpression
entryRuleCompExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompExpressionRule()); }
	iv_ruleCompExpression=ruleCompExpression
	{ $current=$iv_ruleCompExpression.current; }
	EOF;

// Rule CompExpression
ruleCompExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0());
		}
		this_EquExpression_0=ruleEquExpression
		{
			$current = $this_EquExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0());
					}
					lv_compOp_2_0=ruleCompOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"compOp",
							lv_compOp_2_0,
							"org.xtext.example.CNL.CompOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.CNL.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquExpression
entryRuleEquExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquExpressionRule()); }
	iv_ruleEquExpression=ruleEquExpression
	{ $current=$iv_ruleEquExpression.current; }
	EOF;

// Rule EquExpression
ruleEquExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquExpressionAccess().getUnExpressionParserRuleCall_0());
		}
		this_UnExpression_0=ruleUnExpression
		{
			$current = $this_UnExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0());
					}
					lv_equOp_2_0=ruleEquOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"equOp",
							lv_equOp_2_0,
							"org.xtext.example.CNL.EquOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getRightUnExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.CNL.UnExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnOperator
entryRuleUnOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnOperatorRule()); }
	iv_ruleUnOperator=ruleUnOperator
	{ $current=$iv_ruleUnOperator.current.getText(); }
	EOF;

// Rule UnOperator
ruleUnOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnOperatorAccess().getNotOperatorParserRuleCall_0());
		}
		this_NotOperator_0=ruleNotOperator
		{
			$current.merge(this_NotOperator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='FE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getFEKeyword_1());
		}
		    |
		kw='RE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getREKeyword_2());
		}
		    |
		kw='HIGH'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getHIGHKeyword_3());
		}
		    |
		kw='LOW'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getLOWKeyword_4());
		}
	)
;

// Entry rule entryRuleNotOperator
entryRuleNotOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNotOperatorRule()); }
	iv_ruleNotOperator=ruleNotOperator
	{ $current=$iv_ruleNotOperator.current.getText(); }
	EOF;

// Rule NotOperator
ruleNotOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='NOT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNotOperatorAccess().getNOTKeyword_0());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1());
		}
	)
;

// Entry rule entryRuleUnExpression
entryRuleUnExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnExpressionRule()); }
	iv_ruleUnExpression=ruleUnExpression
	{ $current=$iv_ruleUnExpression.current; }
	EOF;

// Rule UnExpression
ruleUnExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnExpressionAccess().getUnOpUnOperatorParserRuleCall_1_0_0());
					}
					lv_unOp_1_0=ruleUnOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnExpressionRule());
						}
						set(
							$current,
							"unOp",
							lv_unOp_1_0,
							"org.xtext.example.CNL.UnOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"org.xtext.example.CNL.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTauExpression
entryRuleTauExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTauExpressionRule()); }
	iv_ruleTauExpression=ruleTauExpression
	{ $current=$iv_ruleTauExpression.current; }
	EOF;

// Rule TauExpression
ruleTauExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TAU'
		{
			newLeafNode(otherlv_0, grammarAccess.getTauExpressionAccess().getTAUKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTauExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTauExpressionAccess().getTimeTimeLiteralParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTimeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTauExpressionRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"org.xtext.example.CNL.TimeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTauExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	iv_ruleTimeLiteral=ruleTimeLiteral
	{ $current=$iv_ruleTimeLiteral.current; }
	EOF;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALParserRuleCall_0());
		}
		ruleTIME_PREF_LITERAL
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_interval_1_0=RULE_INTERVAL
				{
					newLeafNode(lv_interval_1_0, grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_1_0,
						"org.xtext.example.CNL.INTERVAL");
				}
			)
		)
	)
;

// Entry rule entryRuleTIME_PREF_LITERAL
entryRuleTIME_PREF_LITERAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTIME_PREF_LITERALRule()); }
	iv_ruleTIME_PREF_LITERAL=ruleTIME_PREF_LITERAL
	{ $current=$iv_ruleTIME_PREF_LITERAL.current.getText(); }
	EOF;

// Rule TIME_PREF_LITERAL
ruleTIME_PREF_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='#T'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTIME_PREF_LITERALAccess().getTKeyword());
	}
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getNameVarDeclarationCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstantConstantParserRuleCall_1_0());
				}
				lv_constant_1_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"constant",
						lv_constant_1_0,
						"org.xtext.example.CNL.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTauTauExpressionParserRuleCall_2_0());
				}
				lv_tau_2_0=ruleTauExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"tau",
						lv_tau_2_0,
						"org.xtext.example.CNL.TauExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_3_1_0());
					}
					lv_nestExpr_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"nestExpr",
							lv_nestExpr_4_0,
							"org.xtext.example.CNL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current.getText(); }
	EOF;

// Rule Constant
ruleConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INTEGER_0=RULE_INTEGER
		{
			$current.merge(this_INTEGER_0);
		}
		{
			newLeafNode(this_INTEGER_0, grammarAccess.getConstantAccess().getINTEGERTerminalRuleCall_0());
		}
		    |
		this_BOOLEAN_LITERAL_1=RULE_BOOLEAN_LITERAL
		{
			$current.merge(this_BOOLEAN_LITERAL_1);
		}
		{
			newLeafNode(this_BOOLEAN_LITERAL_1, grammarAccess.getConstantAccess().getBOOLEAN_LITERALTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleReqDeclaration
entryRuleReqDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReqDeclarationRule()); }
	iv_ruleReqDeclaration=ruleReqDeclaration
	{ $current=$iv_ruleReqDeclaration.current; }
	EOF;

// Rule ReqDeclaration
ruleReqDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='REQUIREMENT'
		{
			newLeafNode(otherlv_0, grammarAccess.getReqDeclarationAccess().getREQUIREMENTKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getReqDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReqDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReqDeclarationAccess().getRequirementRequirementParserRuleCall_2_0());
				}
				lv_requirement_2_0=ruleRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReqDeclarationRule());
					}
					set(
						$current,
						"requirement",
						lv_requirement_2_0,
						"org.xtext.example.CNL.Requirement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='END_REQUIREMENT'
		{
			newLeafNode(otherlv_3, grammarAccess.getReqDeclarationAccess().getEND_REQUIREMENTKeyword_3());
		}
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementAccess().getTriggerTrigParserRuleCall_0_0_0());
					}
					lv_trigger_0_0=ruleTrig
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementRule());
						}
						set(
							$current,
							"trigger",
							lv_trigger_0_0,
							"org.xtext.example.CNL.Trig");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementAccess().getInvariantInv_alwaysParserRuleCall_0_1_0());
					}
					lv_invariant_1_0=ruleInv_always
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementRule());
						}
						set(
							$current,
							"invariant",
							lv_invariant_1_0,
							"org.xtext.example.CNL.Inv_always");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleTrig
entryRuleTrig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrigRule()); }
	iv_ruleTrig=ruleTrig
	{ $current=$iv_ruleTrig.current; }
	EOF;

// Rule Trig
ruleTrig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='After'
				{
					newLeafNode(otherlv_0, grammarAccess.getTrigAccess().getAfterKeyword_0_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTrigRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getTrigAccess().getNameSentenceDeclarationCrossReference_0_0_1_0());
						}
						ruleSentence
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				{
					newCompositeNode(grammarAccess.getTrigAccess().getCOMMAParserRuleCall_0_0_2());
				}
				ruleCOMMA
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			otherlv_3='Always'
			{
				newLeafNode(otherlv_3, grammarAccess.getTrigAccess().getAlwaysKeyword_0_1());
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTrigAccess().getInvariantInvParserRuleCall_1_0_0());
					}
					lv_invariant_4_0=ruleInv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrigRule());
						}
						set(
							$current,
							"invariant",
							lv_invariant_4_0,
							"org.xtext.example.CNL.Inv");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTrigAccess().getRelease_reactionRelReaParserRuleCall_1_1_0());
					}
					lv_release_reaction_5_0=ruleRelRea
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrigRule());
						}
						set(
							$current,
							"release_reaction",
							lv_release_reaction_5_0,
							"org.xtext.example.CNL.RelRea");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTrigAccess().getDelay_finalDelFinParserRuleCall_1_2_0());
					}
					lv_delay_final_6_0=ruleDelFin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrigRule());
						}
						set(
							$current,
							"delay_final",
							lv_delay_final_6_0,
							"org.xtext.example.CNL.DelFin");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInv
entryRuleInv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvRule()); }
	iv_ruleInv=ruleInv
	{ $current=$iv_ruleInv.current; }
	EOF;

// Rule Inv
ruleInv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInvAccess().getInvAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInvAccess().getInvSentenceDeclarationCrossReference_1_0());
				}
				ruleSentence
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInvAccess().getCOMMAParserRuleCall_2_0_0());
				}
				ruleCOMMA
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInvAccess().getDelay_finalDelFinParserRuleCall_2_0_1_0());
						}
						lv_delay_final_3_0=ruleDelFin
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInvRule());
							}
							set(
								$current,
								"delay_final",
								lv_delay_final_3_0,
								"org.xtext.example.CNL.DelFin");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='should'
				{
					newLeafNode(otherlv_4, grammarAccess.getInvAccess().getShouldKeyword_2_1_0());
				}
				otherlv_5='remain'
				{
					newLeafNode(otherlv_5, grammarAccess.getInvAccess().getRemainKeyword_2_1_1());
				}
				otherlv_6='valid'
				{
					newLeafNode(otherlv_6, grammarAccess.getInvAccess().getValidKeyword_2_1_2());
				}
				otherlv_7='until'
				{
					newLeafNode(otherlv_7, grammarAccess.getInvAccess().getUntilKeyword_2_1_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInvAccess().getRelease_reactionRelReaParserRuleCall_2_1_4_0());
						}
						lv_release_reaction_8_0=ruleRelRea
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInvRule());
							}
							set(
								$current,
								"release_reaction",
								lv_release_reaction_8_0,
								"org.xtext.example.CNL.RelRea");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleInv_always
entryRuleInv_always returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInv_alwaysRule()); }
	iv_ruleInv_always=ruleInv_always
	{ $current=$iv_ruleInv_always.current; }
	EOF;

// Rule Inv_always
ruleInv_always returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInv_alwaysAccess().getInv_alwaysAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInv_alwaysRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getInv_alwaysAccess().getInvSentenceDeclarationCrossReference_1_0_0());
					}
					ruleSentence
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='should'
			{
				newLeafNode(otherlv_2, grammarAccess.getInv_alwaysAccess().getShouldKeyword_1_1());
			}
			otherlv_3='always'
			{
				newLeafNode(otherlv_3, grammarAccess.getInv_alwaysAccess().getAlwaysKeyword_1_2());
			}
			otherlv_4='remain'
			{
				newLeafNode(otherlv_4, grammarAccess.getInv_alwaysAccess().getRemainKeyword_1_3());
			}
			otherlv_5='valid'
			{
				newLeafNode(otherlv_5, grammarAccess.getInv_alwaysAccess().getValidKeyword_1_4());
			}
			otherlv_6='until'
			{
				newLeafNode(otherlv_6, grammarAccess.getInv_alwaysAccess().getUntilKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInv_alwaysAccess().getRelease_reactionRelReaParserRuleCall_1_6_0());
					}
					lv_release_reaction_7_0=ruleRelRea
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInv_alwaysRule());
						}
						set(
							$current,
							"release_reaction",
							lv_release_reaction_7_0,
							"org.xtext.example.CNL.RelRea");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRelRea
entryRuleRelRea returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelReaRule()); }
	iv_ruleRelRea=ruleRelRea
	{ $current=$iv_ruleRelRea.current; }
	EOF;

// Rule RelRea
ruleRelRea returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='either'
			{
				newLeafNode(otherlv_0, grammarAccess.getRelReaAccess().getEitherKeyword_0_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelReaAccess().getRelAction_0_1(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelReaRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRelReaAccess().getRelSentenceDeclarationCrossReference_0_2_0());
					}
					ruleSentence
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='or'
			{
				newLeafNode(otherlv_3, grammarAccess.getRelReaAccess().getOrKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRelReaAccess().getReactionReactionParserRuleCall_0_4_0());
					}
					lv_reaction_4_0=ruleReaction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelReaRule());
						}
						set(
							$current,
							"reaction",
							lv_reaction_4_0,
							"org.xtext.example.CNL.Reaction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				{
					newCompositeNode(grammarAccess.getRelReaAccess().getCOMMAParserRuleCall_0_5_0());
				}
				ruleCOMMA
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRelReaAccess().getDelay_finalDelFinParserRuleCall_0_5_1_0());
						}
						lv_delay_final_6_0=ruleDelFin
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelReaRule());
							}
							set(
								$current,
								"delay_final",
								lv_delay_final_6_0,
								"org.xtext.example.CNL.DelFin");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelReaAccess().getRelAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelReaRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRelReaAccess().getRelSentenceDeclarationCrossReference_1_1_0());
					}
					ruleSentence
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelReaAccess().getReaAction_2_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRelReaAccess().getReactionReactionParserRuleCall_2_1_0_0());
						}
						lv_reaction_10_0=ruleReaction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelReaRule());
							}
							set(
								$current,
								"reaction",
								lv_reaction_10_0,
								"org.xtext.example.CNL.Reaction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						newCompositeNode(grammarAccess.getRelReaAccess().getCOMMAParserRuleCall_2_1_1_0());
					}
					ruleCOMMA
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getRelReaAccess().getDelay_finalDelFinParserRuleCall_2_1_1_1_0());
							}
							lv_delay_final_12_0=ruleDelFin
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRelReaRule());
								}
								set(
									$current,
									"delay_final",
									lv_delay_final_12_0,
									"org.xtext.example.CNL.DelFin");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelReaAccess().getReaAction_3_0(),
						$current);
				}
			)
			(
				otherlv_14='Reaction'
				{
					newLeafNode(otherlv_14, grammarAccess.getRelReaAccess().getReactionKeyword_3_1_0());
				}
				otherlv_15='is'
				{
					newLeafNode(otherlv_15, grammarAccess.getRelReaAccess().getIsKeyword_3_1_1());
				}
				otherlv_16='always'
				{
					newLeafNode(otherlv_16, grammarAccess.getRelReaAccess().getAlwaysKeyword_3_1_2());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelReaRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRelReaAccess().getReaSentenceDeclarationCrossReference_3_1_3_0());
						}
						ruleSentence
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						newCompositeNode(grammarAccess.getRelReaAccess().getCOMMAParserRuleCall_3_1_4_0());
					}
					ruleCOMMA
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getRelReaAccess().getDelay_finalDelFinParserRuleCall_3_1_4_1_0());
							}
							lv_delay_final_19_0=ruleDelFin
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRelReaRule());
								}
								set(
									$current,
									"delay_final",
									lv_delay_final_19_0,
									"org.xtext.example.CNL.DelFin");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
		)
	)
;

// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	iv_ruleReaction=ruleReaction
	{ $current=$iv_ruleReaction.current; }
	EOF;

// Rule Reaction
ruleReaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReactionAccess().getReaAction_0(),
					$current);
			}
		)
		otherlv_1='reaction'
		{
			newLeafNode(otherlv_1, grammarAccess.getReactionAccess().getReactionKeyword_1());
		}
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getReactionAccess().getIsKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReactionAccess().getReaSentenceDeclarationCrossReference_3_0());
				}
				ruleSentence
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDelFin
entryRuleDelFin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelFinRule()); }
	iv_ruleDelFin=ruleDelFin
	{ $current=$iv_ruleDelFin.current; }
	EOF;

// Rule DelFin
ruleDelFin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDelFinAccess().getSentenceAction_0(),
					$current);
			}
		)
		(
			(
				(
					otherlv_1='which'
					{
						newLeafNode(otherlv_1, grammarAccess.getDelFinAccess().getWhichKeyword_1_0_0_0());
					}
					otherlv_2='must'
					{
						newLeafNode(otherlv_2, grammarAccess.getDelFinAccess().getMustKeyword_1_0_0_1());
					}
					otherlv_3='occur'
					{
						newLeafNode(otherlv_3, grammarAccess.getDelFinAccess().getOccurKeyword_1_0_0_2());
					}
				)
				(
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getDelFinAccess().getDelayDelayParserRuleCall_1_0_1_0_0_0());
								}
								lv_delay_4_0=ruleDelay
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getDelFinRule());
									}
									set(
										$current,
										"delay",
										lv_delay_4_0,
										"org.xtext.example.CNL.Delay");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_5='from'
							{
								newLeafNode(otherlv_5, grammarAccess.getDelFinAccess().getFromKeyword_1_0_1_0_1_0());
							}
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getDelFinRule());
										}
									}
									{
										newCompositeNode(grammarAccess.getDelFinAccess().getFinSentenceDeclarationCrossReference_1_0_1_0_1_1_0());
									}
									ruleSentence
									{
										afterParserOrEnumRuleCall();
									}
								)
							)
						)?
					)
					    |
					(
						(
							otherlv_7='immediately'
							{
								newLeafNode(otherlv_7, grammarAccess.getDelFinAccess().getImmediatelyKeyword_1_0_1_1_0());
							}
						)?
						otherlv_8='after'
						{
							newLeafNode(otherlv_8, grammarAccess.getDelFinAccess().getAfterKeyword_1_0_1_1_1());
						}
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getDelFinRule());
									}
								}
								{
									newCompositeNode(grammarAccess.getDelFinAccess().getFinSentenceDeclarationCrossReference_1_0_1_1_2_0());
								}
								ruleSentence
								{
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDelFinRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDelFinAccess().getFinSentenceDeclarationCrossReference_1_1_0());
					}
					ruleSentence
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDelay
entryRuleDelay returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelayRule()); }
	iv_ruleDelay=ruleDelay
	{ $current=$iv_ruleDelay.current; }
	EOF;

// Rule Delay
ruleDelay returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='within'
		{
			newLeafNode(otherlv_0, grammarAccess.getDelayAccess().getWithinKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDelayAccess().getDelAction_1(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDelayRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDelayAccess().getDelSentenceDeclarationCrossReference_2_0());
				}
				ruleSentence
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSentence
entryRuleSentence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current.getText(); }
	EOF;

// Rule Sentence
ruleSentence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getSentenceAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOMMARule()); }
	iv_ruleCOMMA=ruleCOMMA
	{ $current=$iv_ruleCOMMA.current.getText(); }
	EOF;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=','
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword());
	}
;

// Rule EquOperator
ruleEquOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<>'
			{
				$current = grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompOperator
ruleCompOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<='
			{
				$current = grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_OR_OPERATOR : ('||'|'OR');

RULE_INTERVAL : (RULE_INTEGER 'd')? (RULE_INTEGER 'h')? (RULE_INTEGER 'm')? (RULE_INTEGER 's')? (RULE_INTEGER 'ms')?;

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_DIGIT : '0'..'9';

RULE_BOOLEAN_LITERAL : ('TRUE'|'FALSE');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
