grammar org.xtext.example.CNL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cNL "http://www.xtext.org/example/CNL"

// Model:
//    (requirements+=Requirement '.')*;

Model:
(	
	declVarInput+=DeclVarInput |
	declVarOutput+=DeclVarOutput |
	sentDeclaration+=SentDeclaration |
	reqDeclaration+=ReqDeclaration
)*;

// Объявление требований

ReqDeclaration:
	'REQUIREMENT'
	name=ID
	requirement=Requirement
	'END_REQUIREMENT'
;

Requirement:
    (trigger=Trig 
    | invariant=Inv_always) '.';

Trig:
    (
        {Trig} ('After' trig=Sentence Comma)
        | 'Always'
    )
    (invariant=Inv | release_reaction=RelRea | delay_final=DelFin)
;

Inv:
    
    (
        {Inv} inv=Sentence 
        ((Comma delay_final=DelFin) | 
        	('should' 'remain' 'valid' 'until' release_reaction=RelRea))?
    )
;

Inv_always:
    {Inv_always}
    (
        inv=Sentence 'should' 'always' 'remain' 'valid' 'until' release_reaction=RelRea
    )
;


RelRea:
    (
        'either' {Rel} rel=Sentence 'or' reaction=Reaction (Comma delay_final=DelFin)?
    ) |
    {Rel}
    (
    	rel=Sentence
    ) |
    {Rea}
    (
    	reaction=Reaction (Comma delay_final=DelFin)?
    ) | 
    {Rea}
    (
    	'Reaction' 'is' 'always' rea=Sentence (Comma delay_final=DelFin)?
    )
    
;

Reaction:
	{Rea} 'reaction' 'is' rea=Sentence
;


DelFin: 
	{Sentence}
    (
        (
            ('which' 'must' 'occur' )
                (
                	(delay=Delay ('from' fin=Sentence)?)
                	| (('immediately')? 'after' fin=Sentence)
                )
        )
        | fin=Sentence
    )
;

Delay:
	'within' {Del} del=Sentence
;

Sentence:
	{Sentence}
	name=STRING
;

Comma: ',';

// Объявление входных/выходных переменных

VariableType returns ecore::EString:
	'BOOL' | 'INT';

DeclVarInput:
	{DeclVarInput}
	'VAR_INPUT'
	(varDecls+=VarDeclaration ';')+
	 'END_VAR';

DeclVarOutput:
	{DeclVarOutput}
	'VAR_OUTPUT' 
	(varDecls+=VarDeclaration ';')+ 
	'END_VAR';
	
VarDeclaration:
	name=ID ':' type=VariableType;

// Объявление предложений (частей требования) и соответствующих логических выражений

SentDeclaration:
	{SentDeclaration}
	'SENTENCE' name=ID
	sentenceDeclaration=SentenceDeclaration
	'END_SENTENCE';

SentenceDeclaration:
    {SentenceDeclaration}
    name=Sentence '=' logicExpression=Expression
;

Expression:
	XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*
;

terminal OR_OPERATOR:
	'||' | 'OR';

XorExpression:
	AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;

XOR_OPERATOR:
	'XOR';
	
AndExpression:
	CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*;

AND_OPERATOR:
	'AND' | '&&';
	
CompExpression:
	EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*;

EquExpression:
	UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*;
	
enum EquOperator:
	EQUAL='==' | NOT_EQUAL='<>';

enum CompOperator:
	LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';

UnOperator returns ecore::EString:
	NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW' ;

NotOperator:
	'NOT' | '!';
	
UnExpression:
	PrimaryExpression | unOp=UnOperator right=PrimaryExpression;

TauExpression:
	'TAU' '(' (time=TimeLiteral) ')';

TimeLiteral:
	 TIME_PREF_LITERAL interval=INTERVAL;

TIME_PREF_LITERAL returns ecore::EString:
	'#T';

terminal INTERVAL returns ecore::EString:
	(INTEGER 'd')? (INTEGER 'h')? (INTEGER 'm')? (INTEGER 's')? (INTEGER 'ms')?;

PrimaryExpression:
	constant=Constant | 
	tau=TauExpression | 
	var=Variable | 
	'(' nestExpr=Expression ')';

Variable:
	{var}
	var=ID
;

Constant:
	INTEGER | BOOLEAN_LITERAL;

terminal INTEGER returns ecore::EString:
	DIGIT+;

terminal fragment DIGIT:
	'0'..'9';

terminal BOOLEAN_LITERAL:
	'TRUE' | 'FALSE';
