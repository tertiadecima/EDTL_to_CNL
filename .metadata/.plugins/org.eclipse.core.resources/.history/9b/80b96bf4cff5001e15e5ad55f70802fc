/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.validation;

import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xtext.generator.parser.antlr.splitting.simpleExpressions.Comparison;
import org.xtext.example.cNL.CNLPackage;
import org.xtext.example.cNL.DeclVarInput;
import org.xtext.example.cNL.DeclVarOutput;
import org.xtext.example.cNL.Model;
import org.xtext.example.cNL.SentDeclaration;
import org.xtext.example.cNL.Sentence;
import org.xtext.example.cNL.VarDeclaration;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CNLValidator extends AbstractCNLValidator {
	
	// Имена переменных в инпут и аутпут не совпадают
    @Check
    public void checkUniqueVariableNames(Model model) {
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                
                for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
                    for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                        if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                            error("Duplicate variable name '" + varName + "'", varDecl, null, -1);
                        }
                    }
                }
            }
        }
        
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarInput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Duplicate variable name '" + varName + "'", varDecl, null, -1);
                    }
                }
            }
        }
        
        for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
            for (VarDeclaration varDecl : declVarOutput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Duplicate variable name '" + varName + "'", varDecl, null, -1);
                    }
                }
            }
        }
    }
    
    // Check if a sentence is used before its declaration
    @Check
    public void checkSentencesUsage(Model model) {
        for (SentDeclaration sentDecl : model.getSentDeclaration()) {
            String sentName = sentDecl.getName();
            boolean isDeclared = false;
            for (SentDeclaration otherSentDecl : model.getSentDeclaration()) {
                if (otherSentDecl != sentDecl && sentName.equals(otherSentDecl)) {
                    isDeclared = true;
                    break;
                }
            }
           
            if (!isDeclared) {
                error("Sentence '" + sentName + "' is used before its declaration", sentDecl, null, -1);
            }
        }
    }
	
	// Переменные сначала объявлены, потом использованы в строках
	
	// Строки сначала объявлены, потом использованы в требованиях
	
	// Переменная объявлена второй раз
	
	// Сравниваемые переменные одного типа



	
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					CNLPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
}

