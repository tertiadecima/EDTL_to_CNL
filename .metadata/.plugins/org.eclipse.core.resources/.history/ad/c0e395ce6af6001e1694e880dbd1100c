/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.validation;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.cNL.CNLPackage;
import org.xtext.example.cNL.CompExpression;
import org.xtext.example.cNL.DeclVarInput;
import org.xtext.example.cNL.DeclVarOutput;
import org.xtext.example.cNL.Expression;
import org.xtext.example.cNL.Model;
import org.xtext.example.cNL.Reaction;
import org.xtext.example.cNL.SentDeclaration;
import org.xtext.example.cNL.Sentence;
import org.xtext.example.cNL.VarDeclaration;

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CNLValidator extends AbstractCNLValidator {
	
	// Имена переменных не совпадают
    @Check
    public void checkUniqueVariableNames(Model model) {
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                
                for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
                    for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                        if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                            error("Повторяется переменная '" + varName + "' в VAR_INPUT и VAR_OUTPUT", varDecl, null, -1);
                        }
                    }
                }
            }
        }
        
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarInput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Повторяется переменная '" + varName + "' в VAR_INPUT", varDecl, null, -1);
                    }
                }
            }
        }
        
        for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
            for (VarDeclaration varDecl : declVarOutput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Повторяется переменная '" + varName + "' в VAR_OUTPUT", varDecl, null, -1);
                    }
                }
            }
        }
    }    
    
    
    // Строки сначала объявлены, потом использованы в требованиях

    
    // Переменные сначала объявлены, потом использованы в строках
    @Check
    public void checkVariableUsageInExpression(Expression expression, SentDeclaration sentDeclaration) {
    	 Sentence sentenceDeclaration = sentDeclaration.getSentenceDeclaration();
         if (sentenceDeclaration != null) {
             // Perform validation or access its properties
             String sentenceText = sentenceDeclaration.getText();
         }
    	
        for (VariableType variableType : expression.getAllVariables()) {
            String variableName = variableType.getName();
            if (!isVariableDeclaredInInputsOrOutputs(variableName, expression)) {
                error("Variable '" + variableName + "' is not declared in DeclVarInput or DeclVarOutput", 
                      expression, CNLPackage.Literals.EXPRESSION__LEFT, -1);
            }
        }
    }
    
    // Check if a variable is declared in DeclVarInput or DeclVarOutput
    private boolean isVariableDeclaredInInputsOrOutputs(String variableName, Expression expression) {
        Model model = getModel(expression);
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDeclaration : declVarInput.getVarDecls()) {
                if (varDeclaration.getName().equals(variableName)) {
                    return true;
                }
            }
        }
        for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
            for (VarDeclaration varDeclaration : declVarOutput.getVarDecls()) {
                if (varDeclaration.getName().equals(variableName)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private Model getModel(Expression expression) {
        return (Model) expression.eContainer().eContainer();
    }
		
	// Сравниваемые переменные одного типа
//    @Check
//    public void checkComparedVariablesAreOfTheSameType(CompExpression compExpression) {
//        Expression leftVariable = compExpression.getLeft();
//        Expression rightVariable = compExpression.getRight();
//
//        if (!leftVariable.getClass().getName().equals(rightVariable.getClass().getName())) {
//            error("Переменные разных типов", compExpression, null, -1);
//        }
//    }

    
    // reaction только output, все остальные только input
    
    

}

