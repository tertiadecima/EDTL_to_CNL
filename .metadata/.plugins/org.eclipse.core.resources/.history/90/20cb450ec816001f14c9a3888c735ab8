/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.validation;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.cNL.*;


/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 * @param <VariableType>
 */
public class CNLValidator<VariableType> extends AbstractCNLValidator {
	
	/* ======================= UNIQUE VAR NAMES ======================= */
    @Check
    public void checkUniqueVariableNames(Model model) {
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                
                for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
                    for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                        if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                            error("Повторяется переменная '" + varName + "' в VAR_INPUT и VAR_OUTPUT", varDecl, null, -1);
                        }
                    }
                }
            }
        }
        
        for (DeclVarInput declVarInput : model.getDeclVarInput()) {
            for (VarDeclaration varDecl : declVarInput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarInput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Повторяется переменная '" + varName + "' в VAR_INPUT", varDecl, null, -1);
                    }
                }
            }
        }
        
        for (DeclVarOutput declVarOutput : model.getDeclVarOutput()) {
            for (VarDeclaration varDecl : declVarOutput.getVarDecls()) {
                String varName = varDecl.getName();
                for (VarDeclaration otherVarDecl : declVarOutput.getVarDecls()) {
                    if (varDecl != otherVarDecl && varName.equals(otherVarDecl.getName())) {
                        error("Повторяется переменная '" + varName + "' в VAR_OUTPUT", varDecl, null, -1);
                    }
                }
            }
        }
    }
    
	/* ======================= UNIQUE SENT NAMES ======================= */
    @Check
    public void checkUniqueSentenceNames(Model model) {
        Set<String> sentenceNames = new HashSet<>();
        for (SentDeclaration sentDeclaration : model.getSentDeclaration()) {
            String sentName = sentDeclaration.getDeclarationName();
            if (!sentenceNames.add(sentName)) {
                error("Повторяется идентификатор предложения '" + sentName + "'", sentDeclaration, null, -1);
            }
        }
    }
    
	/* ======================= UNIQUE REQ NAMES ======================= */
    @Check
    public void checkUniqueRequirementNames(Model model) {
        Set<String> requirementNames = new HashSet<>();
    	for (ReqDeclaration reqDeclaration : model.getReqDeclaration()) {
            String reqName = reqDeclaration.getName();
            if (!requirementNames.add(reqName)) {
                error("Повторяется идентификатор требования '" + reqName + "'", reqDeclaration, null, -1);
            }
        }
    }  
    
	/* ======================= SAME TYPE IN LOGIC EXPRESSION ======================= */
    // TODO: нельзя сравнивать BOOL и чиселку
    @Check
    public void checkSameTypeInExpression(Expression expression) {
        Set<VarDeclaration> usedVars = new HashSet<>();
        collectVarDeclarationNames(expression, usedVars);

        if (usedVars.size() > 1) {
            String expectedType = usedVars.iterator().next().getType();
            for (VarDeclaration var : usedVars) {
                if (!var.getType().equals(expectedType)) {
                    error("Разные типы переменных в логическом выражении. Ожидалось: " + expectedType + 
                    		", но переменная '" + var.getName() + "' имеет тип '" + var.getType() + "'",
                        
                    		CNLPackage.Literals.EXPRESSION__RIGHT,
                    		"inconsistent-types"
                    );
                    return;
                }
            }
        }
    }
        
	/* ======================= VAR DECLARED AND USED ======================= */
    @Check
    public void checkVariableUsage(VarDeclaration varDecl) {
        Model model = (Model) EcoreUtil2.getContainerOfType(varDecl, Model.class);
        if (!hasCrossReferences(model, varDecl)) {
            warning("Переменная '" + varDecl.getName() + "' объявлена, но не использована", CNLPackage.Literals.VAR_DECLARATION__NAME);
        }
    }

	/* ======================= SENT DECLARED AND USED ======================= */
    @Check
    public void checkSentenceUsage(SentenceDeclaration sentDecl) {
        Model model = (Model) EcoreUtil2.getContainerOfType(sentDecl, Model.class);
        if (!hasCrossReferences(model, sentDecl)) {
            warning("Предложение объявлено, но не использовано", CNLPackage.Literals.SENTENCE_DECLARATION__NAME);
        }
    }

	/* ======================= ADDITIONAL FUNCTIONS ======================= */
    private void collectVarDeclarationNames(Expression expression, Set<VarDeclaration> usedVars) {
        if (expression.getLeft() != null) {
        	collectVarDeclarationNames(expression.getLeft(), usedVars);
        }
        if (expression.getRight() != null) {
        	collectVarDeclarationNames(expression.getRight(), usedVars);
        } else if (expression instanceof PrimaryExpression) {
            PrimaryExpression primary = (PrimaryExpression) expression;
            if (primary.getName() != null) {
                usedVars.add(primary.getName());
            }
        }
    }
    
    private boolean hasCrossReferences(EObject context, EObject target) {
        Set<EObject> targetSet = new HashSet<>();
        targetSet.add(target);
        List<EReference> res = new ArrayList<>();

        EcoreUtil2.ElementReferenceAcceptor acceptor = new EcoreUtil2.ElementReferenceAcceptor() {
            @Override
            public void accept(EObject referrer, EObject referenced, EReference reference, int index) {
                res.add(reference);
            }
        };

        EcoreUtil2.findCrossReferences(context, targetSet, acceptor);
        return !res.isEmpty();
    }
    
}

