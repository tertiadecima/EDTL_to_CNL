/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.ide.contentassist.antlr.internal.InternalCNLParser;
import org.xtext.example.services.CNLGrammarAccess;

public class CNLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CNLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CNLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getRequirementAccess().getAlternatives_0(), "rule__Requirement__Alternatives_0");
			builder.put(grammarAccess.getTrigAccess().getAlternatives_1(), "rule__Trig__Alternatives_1");
			builder.put(grammarAccess.getTrigAccess().getAlternatives_2(), "rule__Trig__Alternatives_2");
			builder.put(grammarAccess.getInvAccess().getAlternatives_1_1(), "rule__Inv__Alternatives_1_1");
			builder.put(grammarAccess.getRelReaAccess().getAlternatives(), "rule__RelRea__Alternatives");
			builder.put(grammarAccess.getDelFinAccess().getAlternatives_1(), "rule__DelFin__Alternatives_1");
			builder.put(grammarAccess.getDelFinAccess().getAlternatives_1_0_1(), "rule__DelFin__Alternatives_1_0_1");
			builder.put(grammarAccess.getSentenceAccess().getAlternatives_1(), "rule__Sentence__Alternatives_1");
			builder.put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
			builder.put(grammarAccess.getLogicExpressionAccess().getAlternatives_3_2(), "rule__LogicExpression__Alternatives_3_2");
			builder.put(grammarAccess.getOperatorsAccess().getAlternatives(), "rule__Operators__Alternatives");
			builder.put(grammarAccess.getEquatesAccess().getAlternatives(), "rule__Equates__Alternatives");
			builder.put(grammarAccess.getComparesAccess().getAlternatives(), "rule__Compares__Alternatives");
			builder.put(grammarAccess.getAND_OPERATORAccess().getAlternatives(), "rule__AND_OPERATOR__Alternatives");
			builder.put(grammarAccess.getNotOperatorAccess().getAlternatives(), "rule__NotOperator__Alternatives");
			builder.put(grammarAccess.getEquOperatorAccess().getAlternatives(), "rule__EquOperator__Alternatives");
			builder.put(grammarAccess.getCompOperatorAccess().getAlternatives(), "rule__CompOperator__Alternatives");
			builder.put(grammarAccess.getReqDeclarationAccess().getGroup(), "rule__ReqDeclaration__Group__0");
			builder.put(grammarAccess.getRequirementAccess().getGroup(), "rule__Requirement__Group__0");
			builder.put(grammarAccess.getTrigAccess().getGroup(), "rule__Trig__Group__0");
			builder.put(grammarAccess.getTrigAccess().getGroup_1_0(), "rule__Trig__Group_1_0__0");
			builder.put(grammarAccess.getInvAccess().getGroup(), "rule__Inv__Group__0");
			builder.put(grammarAccess.getInvAccess().getGroup_1(), "rule__Inv__Group_1__0");
			builder.put(grammarAccess.getInvAccess().getGroup_1_1_0(), "rule__Inv__Group_1_1_0__0");
			builder.put(grammarAccess.getInvAccess().getGroup_1_1_1(), "rule__Inv__Group_1_1_1__0");
			builder.put(grammarAccess.getInv_alwaysAccess().getGroup(), "rule__Inv_always__Group__0");
			builder.put(grammarAccess.getInv_alwaysAccess().getGroup_1(), "rule__Inv_always__Group_1__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_0(), "rule__RelRea__Group_0__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_0_1(), "rule__RelRea__Group_0_1__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_0_1_6(), "rule__RelRea__Group_0_1_6__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_1(), "rule__RelRea__Group_1__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_2(), "rule__RelRea__Group_2__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_2_1(), "rule__RelRea__Group_2_1__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_2_1_3(), "rule__RelRea__Group_2_1_3__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_3(), "rule__RelRea__Group_3__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_3_1(), "rule__RelRea__Group_3_1__0");
			builder.put(grammarAccess.getRelReaAccess().getGroup_3_1_4(), "rule__RelRea__Group_3_1_4__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup(), "rule__DelFin__Group__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup_1_0(), "rule__DelFin__Group_1_0__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup_1_0_0(), "rule__DelFin__Group_1_0_0__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup_1_0_1_0(), "rule__DelFin__Group_1_0_1_0__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup_1_0_1_0_2(), "rule__DelFin__Group_1_0_1_0_2__0");
			builder.put(grammarAccess.getDelFinAccess().getGroup_1_0_1_1(), "rule__DelFin__Group_1_0_1_1__0");
			builder.put(grammarAccess.getSentenceAccess().getGroup(), "rule__Sentence__Group__0");
			builder.put(grammarAccess.getDeclVarInputAccess().getGroup(), "rule__DeclVarInput__Group__0");
			builder.put(grammarAccess.getDeclVarInputAccess().getGroup_2(), "rule__DeclVarInput__Group_2__0");
			builder.put(grammarAccess.getDeclVarOutputAccess().getGroup(), "rule__DeclVarOutput__Group__0");
			builder.put(grammarAccess.getDeclVarOutputAccess().getGroup_2(), "rule__DeclVarOutput__Group_2__0");
			builder.put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
			builder.put(grammarAccess.getSentDeclarationAccess().getGroup(), "rule__SentDeclaration__Group__0");
			builder.put(grammarAccess.getLogicExpressionAccess().getGroup(), "rule__LogicExpression__Group__0");
			builder.put(grammarAccess.getLogicExpressionAccess().getGroup_3(), "rule__LogicExpression__Group_3__0");
			builder.put(grammarAccess.getModelAccess().getDeclVarInputAssignment_0(), "rule__Model__DeclVarInputAssignment_0");
			builder.put(grammarAccess.getModelAccess().getDeclVarOutputAssignment_1(), "rule__Model__DeclVarOutputAssignment_1");
			builder.put(grammarAccess.getModelAccess().getSentDeclarationAssignment_2(), "rule__Model__SentDeclarationAssignment_2");
			builder.put(grammarAccess.getModelAccess().getReqDeclarationAssignment_3(), "rule__Model__ReqDeclarationAssignment_3");
			builder.put(grammarAccess.getReqDeclarationAccess().getNameAssignment_1(), "rule__ReqDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getReqDeclarationAccess().getRequirementAssignment_2(), "rule__ReqDeclaration__RequirementAssignment_2");
			builder.put(grammarAccess.getRequirementAccess().getTriggerAssignment_0_0(), "rule__Requirement__TriggerAssignment_0_0");
			builder.put(grammarAccess.getRequirementAccess().getInvariantAssignment_0_1(), "rule__Requirement__InvariantAssignment_0_1");
			builder.put(grammarAccess.getTrigAccess().getTrigAssignment_1_0_1(), "rule__Trig__TrigAssignment_1_0_1");
			builder.put(grammarAccess.getTrigAccess().getInvariantAssignment_2_0(), "rule__Trig__InvariantAssignment_2_0");
			builder.put(grammarAccess.getTrigAccess().getRelease_reactionAssignment_2_1(), "rule__Trig__Release_reactionAssignment_2_1");
			builder.put(grammarAccess.getTrigAccess().getDelay_finalAssignment_2_2(), "rule__Trig__Delay_finalAssignment_2_2");
			builder.put(grammarAccess.getInvAccess().getInvAssignment_1_0(), "rule__Inv__InvAssignment_1_0");
			builder.put(grammarAccess.getInvAccess().getDelay_finalAssignment_1_1_0_1(), "rule__Inv__Delay_finalAssignment_1_1_0_1");
			builder.put(grammarAccess.getInvAccess().getRelease_reactionAssignment_1_1_1_4(), "rule__Inv__Release_reactionAssignment_1_1_1_4");
			builder.put(grammarAccess.getInv_alwaysAccess().getInvAssignment_1_0(), "rule__Inv_always__InvAssignment_1_0");
			builder.put(grammarAccess.getInv_alwaysAccess().getRelease_reactionAssignment_1_6(), "rule__Inv_always__Release_reactionAssignment_1_6");
			builder.put(grammarAccess.getRelReaAccess().getRelAssignment_0_1_1(), "rule__RelRea__RelAssignment_0_1_1");
			builder.put(grammarAccess.getRelReaAccess().getReaAssignment_0_1_5(), "rule__RelRea__ReaAssignment_0_1_5");
			builder.put(grammarAccess.getRelReaAccess().getDelay_finalAssignment_0_1_6_1(), "rule__RelRea__Delay_finalAssignment_0_1_6_1");
			builder.put(grammarAccess.getRelReaAccess().getRelAssignment_1_1(), "rule__RelRea__RelAssignment_1_1");
			builder.put(grammarAccess.getRelReaAccess().getReaAssignment_2_1_2(), "rule__RelRea__ReaAssignment_2_1_2");
			builder.put(grammarAccess.getRelReaAccess().getDelay_finalAssignment_2_1_3_1(), "rule__RelRea__Delay_finalAssignment_2_1_3_1");
			builder.put(grammarAccess.getRelReaAccess().getReaAssignment_3_1_3(), "rule__RelRea__ReaAssignment_3_1_3");
			builder.put(grammarAccess.getRelReaAccess().getDelay_finalAssignment_3_1_4_1(), "rule__RelRea__Delay_finalAssignment_3_1_4_1");
			builder.put(grammarAccess.getDelFinAccess().getDelAssignment_1_0_1_0_1(), "rule__DelFin__DelAssignment_1_0_1_0_1");
			builder.put(grammarAccess.getDelFinAccess().getFinAssignment_1_0_1_0_2_1(), "rule__DelFin__FinAssignment_1_0_1_0_2_1");
			builder.put(grammarAccess.getDelFinAccess().getFinAssignment_1_0_1_1_2(), "rule__DelFin__FinAssignment_1_0_1_1_2");
			builder.put(grammarAccess.getDelFinAccess().getFinAssignment_1_1(), "rule__DelFin__FinAssignment_1_1");
			builder.put(grammarAccess.getDeclVarInputAccess().getVarDeclsAssignment_2_0(), "rule__DeclVarInput__VarDeclsAssignment_2_0");
			builder.put(grammarAccess.getDeclVarOutputAccess().getVarDeclsAssignment_2_0(), "rule__DeclVarOutput__VarDeclsAssignment_2_0");
			builder.put(grammarAccess.getVarDeclarationAccess().getNameAssignment_0(), "rule__VarDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getVarDeclarationAccess().getTypeAssignment_2(), "rule__VarDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getSentDeclarationAccess().getNameAssignment_2(), "rule__SentDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getSentDeclarationAccess().getSentenceAssignment_3(), "rule__SentDeclaration__SentenceAssignment_3");
			builder.put(grammarAccess.getSentDeclarationAccess().getLogicExpressionAssignment_5(), "rule__SentDeclaration__LogicExpressionAssignment_5");
			builder.put(grammarAccess.getLogicExpressionAccess().getFormulaAssignment_1(), "rule__LogicExpression__FormulaAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CNLGrammarAccess grammarAccess;

	@Override
	protected InternalCNLParser createParser() {
		InternalCNLParser result = new InternalCNLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CNLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CNLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
