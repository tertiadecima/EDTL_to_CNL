/*
 * generated by Xtext 2.32.0
 */
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.example.domainmodel.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.example.domainmodel.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

}
@parser::members {
	private DomainmodelGrammarAccess grammarAccess;

	public void setGrammarAccess(DomainmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainmodelAccess().getGroup()); }
		(rule__Domainmodel__Group__0)*
		{ after(grammarAccess.getDomainmodelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domainmodel__Group__0__Impl
	rule__Domainmodel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainmodelAccess().getNumbersAssignment_0()); }
	(rule__Domainmodel__NumbersAssignment_0)
	{ after(grammarAccess.getDomainmodelAccess().getNumbersAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domainmodel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainmodelAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getDomainmodelAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getNumberAction_0()); }
	()
	{ after(grammarAccess.getNumberAccess().getNumberAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
	rule__Number__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getSignAssignment_1()); }
	(rule__Number__SignAssignment_1)?
	{ after(grammarAccess.getNumberAccess().getSignAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__2__Impl
	rule__Number__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getBefore_pointAssignment_2()); }
	(rule__Number__Before_pointAssignment_2)
	{ after(grammarAccess.getNumberAccess().getBefore_pointAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__3__Impl
	rule__Number__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_3()); }
	(rule__Number__Group_3__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_4()); }
	(rule__Number__Group_4__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_3__0__Impl
	rule__Number__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getSEPARATORTerminalRuleCall_3_0()); }
	RULE_SEPARATOR
	{ after(grammarAccess.getNumberAccess().getSEPARATORTerminalRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getAfter_pointAssignment_3_1()); }
	(rule__Number__After_pointAssignment_3_1)
	{ after(grammarAccess.getNumberAccess().getAfter_pointAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_4__0__Impl
	rule__Number__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getEXPONENTTerminalRuleCall_4_0()); }
	RULE_EXPONENT
	{ after(grammarAccess.getNumberAccess().getEXPONENTTerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_4__1__Impl
	rule__Number__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getSIGNTerminalRuleCall_4_1()); }
	(RULE_SIGN)?
	{ after(grammarAccess.getNumberAccess().getSIGNTerminalRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getExponentAssignment_4_2()); }
	(rule__Number__ExponentAssignment_4_2)
	{ after(grammarAccess.getNumberAccess().getExponentAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domainmodel__NumbersAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getNumbersNumberParserRuleCall_0_0()); }
		ruleNumber
		{ after(grammarAccess.getDomainmodelAccess().getNumbersNumberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__SignAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getSignSIGNTerminalRuleCall_1_0()); }
		RULE_SIGN
		{ after(grammarAccess.getNumberAccess().getSignSIGNTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Before_pointAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getBefore_pointINTEGERTerminalRuleCall_2_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getNumberAccess().getBefore_pointINTEGERTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__After_pointAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getAfter_pointINTEGERTerminalRuleCall_3_1_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getNumberAccess().getAfter_pointINTEGERTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ExponentAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getExponentINTEGERTerminalRuleCall_4_2_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getNumberAccess().getExponentINTEGERTerminalRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_DIGIT : '0'..'9';

RULE_SEPARATOR : '.';

RULE_SIGN : ('+'|'-');

RULE_EXPONENT : ('E'|'e');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
