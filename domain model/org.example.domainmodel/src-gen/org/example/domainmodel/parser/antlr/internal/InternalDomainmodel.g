/*
 * generated by Xtext 2.32.0
 */
grammar InternalDomainmodel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.domainmodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.domainmodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

}

@parser::members {

 	private DomainmodelGrammarAccess grammarAccess;

    public InternalDomainmodelParser(TokenStream input, DomainmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected DomainmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getNumbersNumberParserRuleCall_0_0());
				}
				lv_numbers_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"numbers",
						lv_numbers_0_0,
						"org.example.domainmodel.Domainmodel.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getDomainmodelAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNumberAccess().getNumberAction_0(),
					$current);
			}
		)
		(
			(
				lv_sign_1_0=RULE_SIGN
				{
					newLeafNode(lv_sign_1_0, grammarAccess.getNumberAccess().getSignSIGNTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberRule());
					}
					setWithLastConsumed(
						$current,
						"sign",
						lv_sign_1_0,
						"org.example.domainmodel.Domainmodel.SIGN");
				}
			)
		)?
		(
			(
				lv_before_point_2_0=RULE_INTEGER
				{
					newLeafNode(lv_before_point_2_0, grammarAccess.getNumberAccess().getBefore_pointINTEGERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberRule());
					}
					setWithLastConsumed(
						$current,
						"before_point",
						lv_before_point_2_0,
						"org.example.domainmodel.Domainmodel.INTEGER");
				}
			)
		)
		(
			this_SEPARATOR_3=RULE_SEPARATOR
			{
				newLeafNode(this_SEPARATOR_3, grammarAccess.getNumberAccess().getSEPARATORTerminalRuleCall_3_0());
			}
			(
				(
					lv_after_point_4_0=RULE_INTEGER
					{
						newLeafNode(lv_after_point_4_0, grammarAccess.getNumberAccess().getAfter_pointINTEGERTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumberRule());
						}
						setWithLastConsumed(
							$current,
							"after_point",
							lv_after_point_4_0,
							"org.example.domainmodel.Domainmodel.INTEGER");
					}
				)
			)
		)?
		(
			this_EXPONENT_5=RULE_EXPONENT
			{
				newLeafNode(this_EXPONENT_5, grammarAccess.getNumberAccess().getEXPONENTTerminalRuleCall_4_0());
			}
			(
				this_SIGN_6=RULE_SIGN
				{
					newLeafNode(this_SIGN_6, grammarAccess.getNumberAccess().getSIGNTerminalRuleCall_4_1());
				}
			)?
			(
				(
					lv_exponent_7_0=RULE_INTEGER
					{
						newLeafNode(lv_exponent_7_0, grammarAccess.getNumberAccess().getExponentINTEGERTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumberRule());
						}
						setWithLastConsumed(
							$current,
							"exponent",
							lv_exponent_7_0,
							"org.example.domainmodel.Domainmodel.INTEGER");
					}
				)
			)
		)?
	)
;

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_DIGIT : '0'..'9';

RULE_SEPARATOR : '.';

RULE_SIGN : ('+'|'-');

RULE_EXPONENT : ('E'|'e');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
