/**
 * generated by Xtext 2.32.0
 */
package org.example.domainmodel.domainmodel.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.example.domainmodel.domainmodel.DomainmodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Number</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.example.domainmodel.domainmodel.impl.NumberImpl#getSign <em>Sign</em>}</li>
 *   <li>{@link org.example.domainmodel.domainmodel.impl.NumberImpl#getBefore_point <em>Before point</em>}</li>
 *   <li>{@link org.example.domainmodel.domainmodel.impl.NumberImpl#getAfter_point <em>After point</em>}</li>
 *   <li>{@link org.example.domainmodel.domainmodel.impl.NumberImpl#getExponent <em>Exponent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NumberImpl extends MinimalEObjectImpl.Container implements org.example.domainmodel.domainmodel.Number
{
  /**
   * The default value of the '{@link #getSign() <em>Sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSign()
   * @generated
   * @ordered
   */
  protected static final String SIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSign() <em>Sign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSign()
   * @generated
   * @ordered
   */
  protected String sign = SIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getBefore_point() <em>Before point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBefore_point()
   * @generated
   * @ordered
   */
  protected static final String BEFORE_POINT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBefore_point() <em>Before point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBefore_point()
   * @generated
   * @ordered
   */
  protected String before_point = BEFORE_POINT_EDEFAULT;

  /**
   * The default value of the '{@link #getAfter_point() <em>After point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfter_point()
   * @generated
   * @ordered
   */
  protected static final String AFTER_POINT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAfter_point() <em>After point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfter_point()
   * @generated
   * @ordered
   */
  protected String after_point = AFTER_POINT_EDEFAULT;

  /**
   * The default value of the '{@link #getExponent() <em>Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExponent()
   * @generated
   * @ordered
   */
  protected static final String EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExponent() <em>Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExponent()
   * @generated
   * @ordered
   */
  protected String exponent = EXPONENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NumberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.NUMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSign()
  {
    return sign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSign(String newSign)
  {
    String oldSign = sign;
    sign = newSign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.NUMBER__SIGN, oldSign, sign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBefore_point()
  {
    return before_point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBefore_point(String newBefore_point)
  {
    String oldBefore_point = before_point;
    before_point = newBefore_point;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.NUMBER__BEFORE_POINT, oldBefore_point, before_point));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAfter_point()
  {
    return after_point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAfter_point(String newAfter_point)
  {
    String oldAfter_point = after_point;
    after_point = newAfter_point;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.NUMBER__AFTER_POINT, oldAfter_point, after_point));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExponent()
  {
    return exponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExponent(String newExponent)
  {
    String oldExponent = exponent;
    exponent = newExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.NUMBER__EXPONENT, oldExponent, exponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.NUMBER__SIGN:
        return getSign();
      case DomainmodelPackage.NUMBER__BEFORE_POINT:
        return getBefore_point();
      case DomainmodelPackage.NUMBER__AFTER_POINT:
        return getAfter_point();
      case DomainmodelPackage.NUMBER__EXPONENT:
        return getExponent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.NUMBER__SIGN:
        setSign((String)newValue);
        return;
      case DomainmodelPackage.NUMBER__BEFORE_POINT:
        setBefore_point((String)newValue);
        return;
      case DomainmodelPackage.NUMBER__AFTER_POINT:
        setAfter_point((String)newValue);
        return;
      case DomainmodelPackage.NUMBER__EXPONENT:
        setExponent((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.NUMBER__SIGN:
        setSign(SIGN_EDEFAULT);
        return;
      case DomainmodelPackage.NUMBER__BEFORE_POINT:
        setBefore_point(BEFORE_POINT_EDEFAULT);
        return;
      case DomainmodelPackage.NUMBER__AFTER_POINT:
        setAfter_point(AFTER_POINT_EDEFAULT);
        return;
      case DomainmodelPackage.NUMBER__EXPONENT:
        setExponent(EXPONENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.NUMBER__SIGN:
        return SIGN_EDEFAULT == null ? sign != null : !SIGN_EDEFAULT.equals(sign);
      case DomainmodelPackage.NUMBER__BEFORE_POINT:
        return BEFORE_POINT_EDEFAULT == null ? before_point != null : !BEFORE_POINT_EDEFAULT.equals(before_point);
      case DomainmodelPackage.NUMBER__AFTER_POINT:
        return AFTER_POINT_EDEFAULT == null ? after_point != null : !AFTER_POINT_EDEFAULT.equals(after_point);
      case DomainmodelPackage.NUMBER__EXPONENT:
        return EXPONENT_EDEFAULT == null ? exponent != null : !EXPONENT_EDEFAULT.equals(exponent);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sign: ");
    result.append(sign);
    result.append(", before_point: ");
    result.append(before_point);
    result.append(", after_point: ");
    result.append(after_point);
    result.append(", exponent: ");
    result.append(exponent);
    result.append(')');
    return result.toString();
  }

} //NumberImpl
