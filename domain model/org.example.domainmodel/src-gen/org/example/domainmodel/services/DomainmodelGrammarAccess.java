/*
 * generated by Xtext 2.32.0
 */
package org.example.domainmodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DomainmodelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumbersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumbersNumberParserRuleCall_0_0 = (RuleCall)cNumbersAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Domainmodel:
		//    (numbers+=Number ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(numbers+=Number ';')*
		public Group getGroup() { return cGroup; }
		
		//numbers+=Number
		public Assignment getNumbersAssignment_0() { return cNumbersAssignment_0; }
		
		//Number
		public RuleCall getNumbersNumberParserRuleCall_0_0() { return cNumbersNumberParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignSIGNTerminalRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Assignment cBefore_pointAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBefore_pointINTEGERTerminalRuleCall_2_0 = (RuleCall)cBefore_pointAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cSEPARATORTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cAfter_pointAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAfter_pointINTEGERTerminalRuleCall_3_1_0 = (RuleCall)cAfter_pointAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cEXPONENTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cSIGNTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cExponentAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExponentINTEGERTerminalRuleCall_4_2_0 = (RuleCall)cExponentAssignment_4_2.eContents().get(0);
		
		//Number:
		//     {Number}
		//     sign=SIGN? before_point=INTEGER (SEPARATOR after_point=INTEGER)? (EXPONENT SIGN? exponent=INTEGER)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number}
		//sign=SIGN? before_point=INTEGER (SEPARATOR after_point=INTEGER)? (EXPONENT SIGN? exponent=INTEGER)?
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//sign=SIGN?
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//SIGN
		public RuleCall getSignSIGNTerminalRuleCall_1_0() { return cSignSIGNTerminalRuleCall_1_0; }
		
		//before_point=INTEGER
		public Assignment getBefore_pointAssignment_2() { return cBefore_pointAssignment_2; }
		
		//INTEGER
		public RuleCall getBefore_pointINTEGERTerminalRuleCall_2_0() { return cBefore_pointINTEGERTerminalRuleCall_2_0; }
		
		//(SEPARATOR after_point=INTEGER)?
		public Group getGroup_3() { return cGroup_3; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_3_0() { return cSEPARATORTerminalRuleCall_3_0; }
		
		//after_point=INTEGER
		public Assignment getAfter_pointAssignment_3_1() { return cAfter_pointAssignment_3_1; }
		
		//INTEGER
		public RuleCall getAfter_pointINTEGERTerminalRuleCall_3_1_0() { return cAfter_pointINTEGERTerminalRuleCall_3_1_0; }
		
		//(EXPONENT SIGN? exponent=INTEGER)?
		public Group getGroup_4() { return cGroup_4; }
		
		//EXPONENT
		public RuleCall getEXPONENTTerminalRuleCall_4_0() { return cEXPONENTTerminalRuleCall_4_0; }
		
		//SIGN?
		public RuleCall getSIGNTerminalRuleCall_4_1() { return cSIGNTerminalRuleCall_4_1; }
		
		//exponent=INTEGER
		public Assignment getExponentAssignment_4_2() { return cExponentAssignment_4_2; }
		
		//INTEGER
		public RuleCall getExponentINTEGERTerminalRuleCall_4_2_0() { return cExponentINTEGERTerminalRuleCall_4_2_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final NumberElements pNumber;
	private final TerminalRule tINTEGER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tSIGN;
	private final TerminalRule tEXPONENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DomainmodelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pNumber = new NumberElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.INTEGER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.DIGIT");
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.SEPARATOR");
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.SIGN");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.domainmodel.Domainmodel.EXPONENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.domainmodel.Domainmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//    (numbers+=Number ';')*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//Number:
	//     {Number}
	//     sign=SIGN? before_point=INTEGER (SEPARATOR after_point=INTEGER)? (EXPONENT SIGN? exponent=INTEGER)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal INTEGER returns ecore::EString:
	//    DIGIT+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal fragment DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal SEPARATOR:
	//    '.'
	//;
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal SIGN:
	//    ('+' | '-')
	//;
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal EXPONENT:
	//    ('E' | 'e')
	//;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
